// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camel-agvs-communication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_camel_2dagvs_2dcommunication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_camel_2dagvs_2dcommunication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_camel_2dagvs_2dcommunication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_camel_2dagvs_2dcommunication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camel_2dagvs_2dcommunication_2eproto;
namespace Communication {
class AgvInAgvs;
class AgvInAgvsDefaultTypeInternal;
extern AgvInAgvsDefaultTypeInternal _AgvInAgvs_default_instance_;
class CamelMessage;
class CamelMessageDefaultTypeInternal;
extern CamelMessageDefaultTypeInternal _CamelMessage_default_instance_;
class CamelMessage_AllowFromAgvs;
class CamelMessage_AllowFromAgvsDefaultTypeInternal;
extern CamelMessage_AllowFromAgvsDefaultTypeInternal _CamelMessage_AllowFromAgvs_default_instance_;
class CamelMessage_MissonFromAgvs;
class CamelMessage_MissonFromAgvsDefaultTypeInternal;
extern CamelMessage_MissonFromAgvsDefaultTypeInternal _CamelMessage_MissonFromAgvs_default_instance_;
class CamelMessage_ReportToAgvs;
class CamelMessage_ReportToAgvsDefaultTypeInternal;
extern CamelMessage_ReportToAgvsDefaultTypeInternal _CamelMessage_ReportToAgvs_default_instance_;
class CamelMessage_RequestToAgvs;
class CamelMessage_RequestToAgvsDefaultTypeInternal;
extern CamelMessage_RequestToAgvsDefaultTypeInternal _CamelMessage_RequestToAgvs_default_instance_;
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class Posion;
class PosionDefaultTypeInternal;
extern PosionDefaultTypeInternal _Posion_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace Communication
PROTOBUF_NAMESPACE_OPEN
template<> ::Communication::AgvInAgvs* Arena::CreateMaybeMessage<::Communication::AgvInAgvs>(Arena*);
template<> ::Communication::CamelMessage* Arena::CreateMaybeMessage<::Communication::CamelMessage>(Arena*);
template<> ::Communication::CamelMessage_AllowFromAgvs* Arena::CreateMaybeMessage<::Communication::CamelMessage_AllowFromAgvs>(Arena*);
template<> ::Communication::CamelMessage_MissonFromAgvs* Arena::CreateMaybeMessage<::Communication::CamelMessage_MissonFromAgvs>(Arena*);
template<> ::Communication::CamelMessage_ReportToAgvs* Arena::CreateMaybeMessage<::Communication::CamelMessage_ReportToAgvs>(Arena*);
template<> ::Communication::CamelMessage_RequestToAgvs* Arena::CreateMaybeMessage<::Communication::CamelMessage_RequestToAgvs>(Arena*);
template<> ::Communication::Device* Arena::CreateMaybeMessage<::Communication::Device>(Arena*);
template<> ::Communication::Posion* Arena::CreateMaybeMessage<::Communication::Posion>(Arena*);
template<> ::Communication::Task* Arena::CreateMaybeMessage<::Communication::Task>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Communication {

// ===================================================================

class CamelMessage_AllowFromAgvs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Communication.CamelMessage.AllowFromAgvs) */ {
 public:
  CamelMessage_AllowFromAgvs();
  virtual ~CamelMessage_AllowFromAgvs();

  CamelMessage_AllowFromAgvs(const CamelMessage_AllowFromAgvs& from);
  CamelMessage_AllowFromAgvs(CamelMessage_AllowFromAgvs&& from) noexcept
    : CamelMessage_AllowFromAgvs() {
    *this = ::std::move(from);
  }

  inline CamelMessage_AllowFromAgvs& operator=(const CamelMessage_AllowFromAgvs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage_AllowFromAgvs& operator=(CamelMessage_AllowFromAgvs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CamelMessage_AllowFromAgvs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CamelMessage_AllowFromAgvs* internal_default_instance() {
    return reinterpret_cast<const CamelMessage_AllowFromAgvs*>(
               &_CamelMessage_AllowFromAgvs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CamelMessage_AllowFromAgvs& a, CamelMessage_AllowFromAgvs& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage_AllowFromAgvs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CamelMessage_AllowFromAgvs* New() const final {
    return CreateMaybeMessage<CamelMessage_AllowFromAgvs>(nullptr);
  }

  CamelMessage_AllowFromAgvs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CamelMessage_AllowFromAgvs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CamelMessage_AllowFromAgvs& from);
  void MergeFrom(const CamelMessage_AllowFromAgvs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage_AllowFromAgvs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Communication.CamelMessage.AllowFromAgvs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camel_2dagvs_2dcommunication_2eproto);
    return ::descriptor_table_camel_2dagvs_2dcommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherAgvFieldNumber = 4,
    kErrorMessageFieldNumber = 2,
    kAgvFieldNumber = 1,
    kAllowChargingFieldNumber = 3,
  };
  // repeated .Communication.AgvInAgvs otherAgv = 4;
  int otheragv_size() const;
  private:
  int _internal_otheragv_size() const;
  public:
  void clear_otheragv();
  ::Communication::AgvInAgvs* mutable_otheragv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Communication::AgvInAgvs >*
      mutable_otheragv();
  private:
  const ::Communication::AgvInAgvs& _internal_otheragv(int index) const;
  ::Communication::AgvInAgvs* _internal_add_otheragv();
  public:
  const ::Communication::AgvInAgvs& otheragv(int index) const;
  ::Communication::AgvInAgvs* add_otheragv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Communication::AgvInAgvs >&
      otheragv() const;

  // string errorMessage = 2;
  void clear_errormessage();
  const std::string& errormessage() const;
  void set_errormessage(const std::string& value);
  void set_errormessage(std::string&& value);
  void set_errormessage(const char* value);
  void set_errormessage(const char* value, size_t size);
  std::string* mutable_errormessage();
  std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // .Communication.AgvInAgvs agv = 1;
  bool has_agv() const;
  private:
  bool _internal_has_agv() const;
  public:
  void clear_agv();
  const ::Communication::AgvInAgvs& agv() const;
  ::Communication::AgvInAgvs* release_agv();
  ::Communication::AgvInAgvs* mutable_agv();
  void set_allocated_agv(::Communication::AgvInAgvs* agv);
  private:
  const ::Communication::AgvInAgvs& _internal_agv() const;
  ::Communication::AgvInAgvs* _internal_mutable_agv();
  public:

  // bool allowCharging = 3;
  void clear_allowcharging();
  bool allowcharging() const;
  void set_allowcharging(bool value);
  private:
  bool _internal_allowcharging() const;
  void _internal_set_allowcharging(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Communication.CamelMessage.AllowFromAgvs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Communication::AgvInAgvs > otheragv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
  ::Communication::AgvInAgvs* agv_;
  bool allowcharging_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camel_2dagvs_2dcommunication_2eproto;
};
// -------------------------------------------------------------------

class CamelMessage_ReportToAgvs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Communication.CamelMessage.ReportToAgvs) */ {
 public:
  CamelMessage_ReportToAgvs();
  virtual ~CamelMessage_ReportToAgvs();

  CamelMessage_ReportToAgvs(const CamelMessage_ReportToAgvs& from);
  CamelMessage_ReportToAgvs(CamelMessage_ReportToAgvs&& from) noexcept
    : CamelMessage_ReportToAgvs() {
    *this = ::std::move(from);
  }

  inline CamelMessage_ReportToAgvs& operator=(const CamelMessage_ReportToAgvs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage_ReportToAgvs& operator=(CamelMessage_ReportToAgvs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CamelMessage_ReportToAgvs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CamelMessage_ReportToAgvs* internal_default_instance() {
    return reinterpret_cast<const CamelMessage_ReportToAgvs*>(
               &_CamelMessage_ReportToAgvs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CamelMessage_ReportToAgvs& a, CamelMessage_ReportToAgvs& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage_ReportToAgvs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CamelMessage_ReportToAgvs* New() const final {
    return CreateMaybeMessage<CamelMessage_ReportToAgvs>(nullptr);
  }

  CamelMessage_ReportToAgvs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CamelMessage_ReportToAgvs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CamelMessage_ReportToAgvs& from);
  void MergeFrom(const CamelMessage_ReportToAgvs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage_ReportToAgvs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Communication.CamelMessage.ReportToAgvs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camel_2dagvs_2dcommunication_2eproto);
    return ::descriptor_table_camel_2dagvs_2dcommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 5,
    kCurrentStationFieldNumber = 1,
    kVersionFieldNumber = 2,
    kPosionFieldNumber = 6,
    kBatteryFieldNumber = 3,
    kIsChargingFieldNumber = 4,
  };
  // repeated .Communication.Device devices = 5;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::Communication::Device* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Communication::Device >*
      mutable_devices();
  private:
  const ::Communication::Device& _internal_devices(int index) const;
  ::Communication::Device* _internal_add_devices();
  public:
  const ::Communication::Device& devices(int index) const;
  ::Communication::Device* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Communication::Device >&
      devices() const;

  // string currentStation = 1;
  void clear_currentstation();
  const std::string& currentstation() const;
  void set_currentstation(const std::string& value);
  void set_currentstation(std::string&& value);
  void set_currentstation(const char* value);
  void set_currentstation(const char* value, size_t size);
  std::string* mutable_currentstation();
  std::string* release_currentstation();
  void set_allocated_currentstation(std::string* currentstation);
  private:
  const std::string& _internal_currentstation() const;
  void _internal_set_currentstation(const std::string& value);
  std::string* _internal_mutable_currentstation();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .Communication.Posion posion = 6;
  bool has_posion() const;
  private:
  bool _internal_has_posion() const;
  public:
  void clear_posion();
  const ::Communication::Posion& posion() const;
  ::Communication::Posion* release_posion();
  ::Communication::Posion* mutable_posion();
  void set_allocated_posion(::Communication::Posion* posion);
  private:
  const ::Communication::Posion& _internal_posion() const;
  ::Communication::Posion* _internal_mutable_posion();
  public:

  // float battery = 3;
  void clear_battery();
  float battery() const;
  void set_battery(float value);
  private:
  float _internal_battery() const;
  void _internal_set_battery(float value);
  public:

  // bool isCharging = 4;
  void clear_ischarging();
  bool ischarging() const;
  void set_ischarging(bool value);
  private:
  bool _internal_ischarging() const;
  void _internal_set_ischarging(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Communication.CamelMessage.ReportToAgvs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Communication::Device > devices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentstation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::Communication::Posion* posion_;
  float battery_;
  bool ischarging_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camel_2dagvs_2dcommunication_2eproto;
};
// -------------------------------------------------------------------

class CamelMessage_MissonFromAgvs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Communication.CamelMessage.MissonFromAgvs) */ {
 public:
  CamelMessage_MissonFromAgvs();
  virtual ~CamelMessage_MissonFromAgvs();

  CamelMessage_MissonFromAgvs(const CamelMessage_MissonFromAgvs& from);
  CamelMessage_MissonFromAgvs(CamelMessage_MissonFromAgvs&& from) noexcept
    : CamelMessage_MissonFromAgvs() {
    *this = ::std::move(from);
  }

  inline CamelMessage_MissonFromAgvs& operator=(const CamelMessage_MissonFromAgvs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage_MissonFromAgvs& operator=(CamelMessage_MissonFromAgvs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CamelMessage_MissonFromAgvs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CamelMessage_MissonFromAgvs* internal_default_instance() {
    return reinterpret_cast<const CamelMessage_MissonFromAgvs*>(
               &_CamelMessage_MissonFromAgvs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CamelMessage_MissonFromAgvs& a, CamelMessage_MissonFromAgvs& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage_MissonFromAgvs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CamelMessage_MissonFromAgvs* New() const final {
    return CreateMaybeMessage<CamelMessage_MissonFromAgvs>(nullptr);
  }

  CamelMessage_MissonFromAgvs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CamelMessage_MissonFromAgvs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CamelMessage_MissonFromAgvs& from);
  void MergeFrom(const CamelMessage_MissonFromAgvs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage_MissonFromAgvs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Communication.CamelMessage.MissonFromAgvs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camel_2dagvs_2dcommunication_2eproto);
    return ::descriptor_table_camel_2dagvs_2dcommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 1,
    kActionTypeFieldNumber = 2,
    kTaskFieldNumber = 3,
  };
  // string route = 1;
  void clear_route();
  const std::string& route() const;
  void set_route(const std::string& value);
  void set_route(std::string&& value);
  void set_route(const char* value);
  void set_route(const char* value, size_t size);
  std::string* mutable_route();
  std::string* release_route();
  void set_allocated_route(std::string* route);
  private:
  const std::string& _internal_route() const;
  void _internal_set_route(const std::string& value);
  std::string* _internal_mutable_route();
  public:

  // string actionType = 2;
  void clear_actiontype();
  const std::string& actiontype() const;
  void set_actiontype(const std::string& value);
  void set_actiontype(std::string&& value);
  void set_actiontype(const char* value);
  void set_actiontype(const char* value, size_t size);
  std::string* mutable_actiontype();
  std::string* release_actiontype();
  void set_allocated_actiontype(std::string* actiontype);
  private:
  const std::string& _internal_actiontype() const;
  void _internal_set_actiontype(const std::string& value);
  std::string* _internal_mutable_actiontype();
  public:

  // .Communication.Task task = 3;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::Communication::Task& task() const;
  ::Communication::Task* release_task();
  ::Communication::Task* mutable_task();
  void set_allocated_task(::Communication::Task* task);
  private:
  const ::Communication::Task& _internal_task() const;
  ::Communication::Task* _internal_mutable_task();
  public:

  // @@protoc_insertion_point(class_scope:Communication.CamelMessage.MissonFromAgvs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actiontype_;
  ::Communication::Task* task_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camel_2dagvs_2dcommunication_2eproto;
};
// -------------------------------------------------------------------

class CamelMessage_RequestToAgvs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Communication.CamelMessage.RequestToAgvs) */ {
 public:
  CamelMessage_RequestToAgvs();
  virtual ~CamelMessage_RequestToAgvs();

  CamelMessage_RequestToAgvs(const CamelMessage_RequestToAgvs& from);
  CamelMessage_RequestToAgvs(CamelMessage_RequestToAgvs&& from) noexcept
    : CamelMessage_RequestToAgvs() {
    *this = ::std::move(from);
  }

  inline CamelMessage_RequestToAgvs& operator=(const CamelMessage_RequestToAgvs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage_RequestToAgvs& operator=(CamelMessage_RequestToAgvs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CamelMessage_RequestToAgvs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CamelMessage_RequestToAgvs* internal_default_instance() {
    return reinterpret_cast<const CamelMessage_RequestToAgvs*>(
               &_CamelMessage_RequestToAgvs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CamelMessage_RequestToAgvs& a, CamelMessage_RequestToAgvs& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage_RequestToAgvs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CamelMessage_RequestToAgvs* New() const final {
    return CreateMaybeMessage<CamelMessage_RequestToAgvs>(nullptr);
  }

  CamelMessage_RequestToAgvs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CamelMessage_RequestToAgvs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CamelMessage_RequestToAgvs& from);
  void MergeFrom(const CamelMessage_RequestToAgvs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage_RequestToAgvs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Communication.CamelMessage.RequestToAgvs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camel_2dagvs_2dcommunication_2eproto);
    return ::descriptor_table_camel_2dagvs_2dcommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetMissonInfoFieldNumber = 1,
    kSetUseableFieldNumber = 2,
    kCancelTaskFieldNumber = 3,
    kRequestChargingFieldNumber = 4,
  };
  // bool getMissonInfo = 1;
  void clear_getmissoninfo();
  bool getmissoninfo() const;
  void set_getmissoninfo(bool value);
  private:
  bool _internal_getmissoninfo() const;
  void _internal_set_getmissoninfo(bool value);
  public:

  // bool setUseable = 2;
  void clear_setuseable();
  bool setuseable() const;
  void set_setuseable(bool value);
  private:
  bool _internal_setuseable() const;
  void _internal_set_setuseable(bool value);
  public:

  // bool cancelTask = 3;
  void clear_canceltask();
  bool canceltask() const;
  void set_canceltask(bool value);
  private:
  bool _internal_canceltask() const;
  void _internal_set_canceltask(bool value);
  public:

  // bool requestCharging = 4;
  void clear_requestcharging();
  bool requestcharging() const;
  void set_requestcharging(bool value);
  private:
  bool _internal_requestcharging() const;
  void _internal_set_requestcharging(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Communication.CamelMessage.RequestToAgvs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool getmissoninfo_;
  bool setuseable_;
  bool canceltask_;
  bool requestcharging_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camel_2dagvs_2dcommunication_2eproto;
};
// -------------------------------------------------------------------

class CamelMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Communication.CamelMessage) */ {
 public:
  CamelMessage();
  virtual ~CamelMessage();

  CamelMessage(const CamelMessage& from);
  CamelMessage(CamelMessage&& from) noexcept
    : CamelMessage() {
    *this = ::std::move(from);
  }

  inline CamelMessage& operator=(const CamelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage& operator=(CamelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CamelMessage& default_instance();

  enum OnlyoneCase {
    kAllowFromAgvs = 1,
    kReportToAgvs = 2,
    kMissonFromAgvs = 3,
    kRequestToAgvs = 4,
    ONLYONE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CamelMessage* internal_default_instance() {
    return reinterpret_cast<const CamelMessage*>(
               &_CamelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CamelMessage& a, CamelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CamelMessage* New() const final {
    return CreateMaybeMessage<CamelMessage>(nullptr);
  }

  CamelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CamelMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CamelMessage& from);
  void MergeFrom(const CamelMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Communication.CamelMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camel_2dagvs_2dcommunication_2eproto);
    return ::descriptor_table_camel_2dagvs_2dcommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CamelMessage_AllowFromAgvs AllowFromAgvs;
  typedef CamelMessage_ReportToAgvs ReportToAgvs;
  typedef CamelMessage_MissonFromAgvs MissonFromAgvs;
  typedef CamelMessage_RequestToAgvs RequestToAgvs;

  // accessors -------------------------------------------------------

  enum : int {
    kAllowFromAgvsFieldNumber = 1,
    kReportToAgvsFieldNumber = 2,
    kMissonFromAgvsFieldNumber = 3,
    kRequestToAgvsFieldNumber = 4,
  };
  // .Communication.CamelMessage.AllowFromAgvs allowFromAgvs = 1;
  bool has_allowfromagvs() const;
  private:
  bool _internal_has_allowfromagvs() const;
  public:
  void clear_allowfromagvs();
  const ::Communication::CamelMessage_AllowFromAgvs& allowfromagvs() const;
  ::Communication::CamelMessage_AllowFromAgvs* release_allowfromagvs();
  ::Communication::CamelMessage_AllowFromAgvs* mutable_allowfromagvs();
  void set_allocated_allowfromagvs(::Communication::CamelMessage_AllowFromAgvs* allowfromagvs);
  private:
  const ::Communication::CamelMessage_AllowFromAgvs& _internal_allowfromagvs() const;
  ::Communication::CamelMessage_AllowFromAgvs* _internal_mutable_allowfromagvs();
  public:

  // .Communication.CamelMessage.ReportToAgvs reportToAgvs = 2;
  bool has_reporttoagvs() const;
  private:
  bool _internal_has_reporttoagvs() const;
  public:
  void clear_reporttoagvs();
  const ::Communication::CamelMessage_ReportToAgvs& reporttoagvs() const;
  ::Communication::CamelMessage_ReportToAgvs* release_reporttoagvs();
  ::Communication::CamelMessage_ReportToAgvs* mutable_reporttoagvs();
  void set_allocated_reporttoagvs(::Communication::CamelMessage_ReportToAgvs* reporttoagvs);
  private:
  const ::Communication::CamelMessage_ReportToAgvs& _internal_reporttoagvs() const;
  ::Communication::CamelMessage_ReportToAgvs* _internal_mutable_reporttoagvs();
  public:

  // .Communication.CamelMessage.MissonFromAgvs missonFromAgvs = 3;
  bool has_missonfromagvs() const;
  private:
  bool _internal_has_missonfromagvs() const;
  public:
  void clear_missonfromagvs();
  const ::Communication::CamelMessage_MissonFromAgvs& missonfromagvs() const;
  ::Communication::CamelMessage_MissonFromAgvs* release_missonfromagvs();
  ::Communication::CamelMessage_MissonFromAgvs* mutable_missonfromagvs();
  void set_allocated_missonfromagvs(::Communication::CamelMessage_MissonFromAgvs* missonfromagvs);
  private:
  const ::Communication::CamelMessage_MissonFromAgvs& _internal_missonfromagvs() const;
  ::Communication::CamelMessage_MissonFromAgvs* _internal_mutable_missonfromagvs();
  public:

  // .Communication.CamelMessage.RequestToAgvs requestToAgvs = 4;
  bool has_requesttoagvs() const;
  private:
  bool _internal_has_requesttoagvs() const;
  public:
  void clear_requesttoagvs();
  const ::Communication::CamelMessage_RequestToAgvs& requesttoagvs() const;
  ::Communication::CamelMessage_RequestToAgvs* release_requesttoagvs();
  ::Communication::CamelMessage_RequestToAgvs* mutable_requesttoagvs();
  void set_allocated_requesttoagvs(::Communication::CamelMessage_RequestToAgvs* requesttoagvs);
  private:
  const ::Communication::CamelMessage_RequestToAgvs& _internal_requesttoagvs() const;
  ::Communication::CamelMessage_RequestToAgvs* _internal_mutable_requesttoagvs();
  public:

  void clear_onlyone();
  OnlyoneCase onlyone_case() const;
  // @@protoc_insertion_point(class_scope:Communication.CamelMessage)
 private:
  class _Internal;
  void set_has_allowfromagvs();
  void set_has_reporttoagvs();
  void set_has_missonfromagvs();
  void set_has_requesttoagvs();

  inline bool has_onlyone() const;
  inline void clear_has_onlyone();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union OnlyoneUnion {
    OnlyoneUnion() {}
    ::Communication::CamelMessage_AllowFromAgvs* allowfromagvs_;
    ::Communication::CamelMessage_ReportToAgvs* reporttoagvs_;
    ::Communication::CamelMessage_MissonFromAgvs* missonfromagvs_;
    ::Communication::CamelMessage_RequestToAgvs* requesttoagvs_;
  } onlyone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_camel_2dagvs_2dcommunication_2eproto;
};
// -------------------------------------------------------------------

class Posion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Communication.Posion) */ {
 public:
  Posion();
  virtual ~Posion();

  Posion(const Posion& from);
  Posion(Posion&& from) noexcept
    : Posion() {
    *this = ::std::move(from);
  }

  inline Posion& operator=(const Posion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Posion& operator=(Posion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Posion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Posion* internal_default_instance() {
    return reinterpret_cast<const Posion*>(
               &_Posion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Posion& a, Posion& b) {
    a.Swap(&b);
  }
  inline void Swap(Posion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Posion* New() const final {
    return CreateMaybeMessage<Posion>(nullptr);
  }

  Posion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Posion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Posion& from);
  void MergeFrom(const Posion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Posion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Communication.Posion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camel_2dagvs_2dcommunication_2eproto);
    return ::descriptor_table_camel_2dagvs_2dcommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kThetaFieldNumber = 3,
  };
  // float X = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float Theta = 3;
  void clear_theta();
  float theta() const;
  void set_theta(float value);
  private:
  float _internal_theta() const;
  void _internal_set_theta(float value);
  public:

  // @@protoc_insertion_point(class_scope:Communication.Posion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float theta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camel_2dagvs_2dcommunication_2eproto;
};
// -------------------------------------------------------------------

class Device :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Communication.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Communication.Device";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camel_2dagvs_2dcommunication_2eproto);
    return ::descriptor_table_camel_2dagvs_2dcommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kIsActivateFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isActivate = 3;
  void clear_isactivate();
  bool isactivate() const;
  void set_isactivate(bool value);
  private:
  bool _internal_isactivate() const;
  void _internal_set_isactivate(bool value);
  public:

  // float value = 4;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:Communication.Device)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool isactivate_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camel_2dagvs_2dcommunication_2eproto;
};
// -------------------------------------------------------------------

class AgvInAgvs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Communication.AgvInAgvs) */ {
 public:
  AgvInAgvs();
  virtual ~AgvInAgvs();

  AgvInAgvs(const AgvInAgvs& from);
  AgvInAgvs(AgvInAgvs&& from) noexcept
    : AgvInAgvs() {
    *this = ::std::move(from);
  }

  inline AgvInAgvs& operator=(const AgvInAgvs& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvInAgvs& operator=(AgvInAgvs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgvInAgvs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgvInAgvs* internal_default_instance() {
    return reinterpret_cast<const AgvInAgvs*>(
               &_AgvInAgvs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AgvInAgvs& a, AgvInAgvs& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvInAgvs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgvInAgvs* New() const final {
    return CreateMaybeMessage<AgvInAgvs>(nullptr);
  }

  AgvInAgvs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgvInAgvs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgvInAgvs& from);
  void MergeFrom(const AgvInAgvs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvInAgvs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Communication.AgvInAgvs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camel_2dagvs_2dcommunication_2eproto);
    return ::descriptor_table_camel_2dagvs_2dcommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCurrentStationFieldNumber = 2,
    kTargetStationFieldNumber = 3,
    kIsUseableFieldNumber = 4,
    kHasTaskFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string currentStation = 2;
  void clear_currentstation();
  const std::string& currentstation() const;
  void set_currentstation(const std::string& value);
  void set_currentstation(std::string&& value);
  void set_currentstation(const char* value);
  void set_currentstation(const char* value, size_t size);
  std::string* mutable_currentstation();
  std::string* release_currentstation();
  void set_allocated_currentstation(std::string* currentstation);
  private:
  const std::string& _internal_currentstation() const;
  void _internal_set_currentstation(const std::string& value);
  std::string* _internal_mutable_currentstation();
  public:

  // string targetStation = 3;
  void clear_targetstation();
  const std::string& targetstation() const;
  void set_targetstation(const std::string& value);
  void set_targetstation(std::string&& value);
  void set_targetstation(const char* value);
  void set_targetstation(const char* value, size_t size);
  std::string* mutable_targetstation();
  std::string* release_targetstation();
  void set_allocated_targetstation(std::string* targetstation);
  private:
  const std::string& _internal_targetstation() const;
  void _internal_set_targetstation(const std::string& value);
  std::string* _internal_mutable_targetstation();
  public:

  // bool isUseable = 4;
  void clear_isuseable();
  bool isuseable() const;
  void set_isuseable(bool value);
  private:
  bool _internal_isuseable() const;
  void _internal_set_isuseable(bool value);
  public:

  // bool hasTask = 5;
  void clear_hastask();
  bool hastask() const;
  void set_hastask(bool value);
  private:
  bool _internal_hastask() const;
  void _internal_set_hastask(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Communication.AgvInAgvs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentstation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetstation_;
  bool isuseable_;
  bool hastask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camel_2dagvs_2dcommunication_2eproto;
};
// -------------------------------------------------------------------

class Task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Communication.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Communication.Task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camel_2dagvs_2dcommunication_2eproto);
    return ::descriptor_table_camel_2dagvs_2dcommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // string from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // @@protoc_insertion_point(class_scope:Communication.Task)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camel_2dagvs_2dcommunication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CamelMessage_AllowFromAgvs

// .Communication.AgvInAgvs agv = 1;
inline bool CamelMessage_AllowFromAgvs::_internal_has_agv() const {
  return this != internal_default_instance() && agv_ != nullptr;
}
inline bool CamelMessage_AllowFromAgvs::has_agv() const {
  return _internal_has_agv();
}
inline void CamelMessage_AllowFromAgvs::clear_agv() {
  if (GetArenaNoVirtual() == nullptr && agv_ != nullptr) {
    delete agv_;
  }
  agv_ = nullptr;
}
inline const ::Communication::AgvInAgvs& CamelMessage_AllowFromAgvs::_internal_agv() const {
  const ::Communication::AgvInAgvs* p = agv_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Communication::AgvInAgvs*>(
      &::Communication::_AgvInAgvs_default_instance_);
}
inline const ::Communication::AgvInAgvs& CamelMessage_AllowFromAgvs::agv() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.AllowFromAgvs.agv)
  return _internal_agv();
}
inline ::Communication::AgvInAgvs* CamelMessage_AllowFromAgvs::release_agv() {
  // @@protoc_insertion_point(field_release:Communication.CamelMessage.AllowFromAgvs.agv)
  
  ::Communication::AgvInAgvs* temp = agv_;
  agv_ = nullptr;
  return temp;
}
inline ::Communication::AgvInAgvs* CamelMessage_AllowFromAgvs::_internal_mutable_agv() {
  
  if (agv_ == nullptr) {
    auto* p = CreateMaybeMessage<::Communication::AgvInAgvs>(GetArenaNoVirtual());
    agv_ = p;
  }
  return agv_;
}
inline ::Communication::AgvInAgvs* CamelMessage_AllowFromAgvs::mutable_agv() {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.AllowFromAgvs.agv)
  return _internal_mutable_agv();
}
inline void CamelMessage_AllowFromAgvs::set_allocated_agv(::Communication::AgvInAgvs* agv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete agv_;
  }
  if (agv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      agv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agv, submessage_arena);
    }
    
  } else {
    
  }
  agv_ = agv;
  // @@protoc_insertion_point(field_set_allocated:Communication.CamelMessage.AllowFromAgvs.agv)
}

// string errorMessage = 2;
inline void CamelMessage_AllowFromAgvs::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CamelMessage_AllowFromAgvs::errormessage() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.AllowFromAgvs.errorMessage)
  return _internal_errormessage();
}
inline void CamelMessage_AllowFromAgvs::set_errormessage(const std::string& value) {
  _internal_set_errormessage(value);
  // @@protoc_insertion_point(field_set:Communication.CamelMessage.AllowFromAgvs.errorMessage)
}
inline std::string* CamelMessage_AllowFromAgvs::mutable_errormessage() {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.AllowFromAgvs.errorMessage)
  return _internal_mutable_errormessage();
}
inline const std::string& CamelMessage_AllowFromAgvs::_internal_errormessage() const {
  return errormessage_.GetNoArena();
}
inline void CamelMessage_AllowFromAgvs::_internal_set_errormessage(const std::string& value) {
  
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CamelMessage_AllowFromAgvs::set_errormessage(std::string&& value) {
  
  errormessage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Communication.CamelMessage.AllowFromAgvs.errorMessage)
}
inline void CamelMessage_AllowFromAgvs::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Communication.CamelMessage.AllowFromAgvs.errorMessage)
}
inline void CamelMessage_AllowFromAgvs::set_errormessage(const char* value, size_t size) {
  
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Communication.CamelMessage.AllowFromAgvs.errorMessage)
}
inline std::string* CamelMessage_AllowFromAgvs::_internal_mutable_errormessage() {
  
  return errormessage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CamelMessage_AllowFromAgvs::release_errormessage() {
  // @@protoc_insertion_point(field_release:Communication.CamelMessage.AllowFromAgvs.errorMessage)
  
  return errormessage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CamelMessage_AllowFromAgvs::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  errormessage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:Communication.CamelMessage.AllowFromAgvs.errorMessage)
}

// bool allowCharging = 3;
inline void CamelMessage_AllowFromAgvs::clear_allowcharging() {
  allowcharging_ = false;
}
inline bool CamelMessage_AllowFromAgvs::_internal_allowcharging() const {
  return allowcharging_;
}
inline bool CamelMessage_AllowFromAgvs::allowcharging() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.AllowFromAgvs.allowCharging)
  return _internal_allowcharging();
}
inline void CamelMessage_AllowFromAgvs::_internal_set_allowcharging(bool value) {
  
  allowcharging_ = value;
}
inline void CamelMessage_AllowFromAgvs::set_allowcharging(bool value) {
  _internal_set_allowcharging(value);
  // @@protoc_insertion_point(field_set:Communication.CamelMessage.AllowFromAgvs.allowCharging)
}

// repeated .Communication.AgvInAgvs otherAgv = 4;
inline int CamelMessage_AllowFromAgvs::_internal_otheragv_size() const {
  return otheragv_.size();
}
inline int CamelMessage_AllowFromAgvs::otheragv_size() const {
  return _internal_otheragv_size();
}
inline void CamelMessage_AllowFromAgvs::clear_otheragv() {
  otheragv_.Clear();
}
inline ::Communication::AgvInAgvs* CamelMessage_AllowFromAgvs::mutable_otheragv(int index) {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.AllowFromAgvs.otherAgv)
  return otheragv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Communication::AgvInAgvs >*
CamelMessage_AllowFromAgvs::mutable_otheragv() {
  // @@protoc_insertion_point(field_mutable_list:Communication.CamelMessage.AllowFromAgvs.otherAgv)
  return &otheragv_;
}
inline const ::Communication::AgvInAgvs& CamelMessage_AllowFromAgvs::_internal_otheragv(int index) const {
  return otheragv_.Get(index);
}
inline const ::Communication::AgvInAgvs& CamelMessage_AllowFromAgvs::otheragv(int index) const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.AllowFromAgvs.otherAgv)
  return _internal_otheragv(index);
}
inline ::Communication::AgvInAgvs* CamelMessage_AllowFromAgvs::_internal_add_otheragv() {
  return otheragv_.Add();
}
inline ::Communication::AgvInAgvs* CamelMessage_AllowFromAgvs::add_otheragv() {
  // @@protoc_insertion_point(field_add:Communication.CamelMessage.AllowFromAgvs.otherAgv)
  return _internal_add_otheragv();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Communication::AgvInAgvs >&
CamelMessage_AllowFromAgvs::otheragv() const {
  // @@protoc_insertion_point(field_list:Communication.CamelMessage.AllowFromAgvs.otherAgv)
  return otheragv_;
}

// -------------------------------------------------------------------

// CamelMessage_ReportToAgvs

// string currentStation = 1;
inline void CamelMessage_ReportToAgvs::clear_currentstation() {
  currentstation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CamelMessage_ReportToAgvs::currentstation() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.ReportToAgvs.currentStation)
  return _internal_currentstation();
}
inline void CamelMessage_ReportToAgvs::set_currentstation(const std::string& value) {
  _internal_set_currentstation(value);
  // @@protoc_insertion_point(field_set:Communication.CamelMessage.ReportToAgvs.currentStation)
}
inline std::string* CamelMessage_ReportToAgvs::mutable_currentstation() {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.ReportToAgvs.currentStation)
  return _internal_mutable_currentstation();
}
inline const std::string& CamelMessage_ReportToAgvs::_internal_currentstation() const {
  return currentstation_.GetNoArena();
}
inline void CamelMessage_ReportToAgvs::_internal_set_currentstation(const std::string& value) {
  
  currentstation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CamelMessage_ReportToAgvs::set_currentstation(std::string&& value) {
  
  currentstation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Communication.CamelMessage.ReportToAgvs.currentStation)
}
inline void CamelMessage_ReportToAgvs::set_currentstation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currentstation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Communication.CamelMessage.ReportToAgvs.currentStation)
}
inline void CamelMessage_ReportToAgvs::set_currentstation(const char* value, size_t size) {
  
  currentstation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Communication.CamelMessage.ReportToAgvs.currentStation)
}
inline std::string* CamelMessage_ReportToAgvs::_internal_mutable_currentstation() {
  
  return currentstation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CamelMessage_ReportToAgvs::release_currentstation() {
  // @@protoc_insertion_point(field_release:Communication.CamelMessage.ReportToAgvs.currentStation)
  
  return currentstation_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CamelMessage_ReportToAgvs::set_allocated_currentstation(std::string* currentstation) {
  if (currentstation != nullptr) {
    
  } else {
    
  }
  currentstation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currentstation);
  // @@protoc_insertion_point(field_set_allocated:Communication.CamelMessage.ReportToAgvs.currentStation)
}

// string version = 2;
inline void CamelMessage_ReportToAgvs::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CamelMessage_ReportToAgvs::version() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.ReportToAgvs.version)
  return _internal_version();
}
inline void CamelMessage_ReportToAgvs::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Communication.CamelMessage.ReportToAgvs.version)
}
inline std::string* CamelMessage_ReportToAgvs::mutable_version() {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.ReportToAgvs.version)
  return _internal_mutable_version();
}
inline const std::string& CamelMessage_ReportToAgvs::_internal_version() const {
  return version_.GetNoArena();
}
inline void CamelMessage_ReportToAgvs::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CamelMessage_ReportToAgvs::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Communication.CamelMessage.ReportToAgvs.version)
}
inline void CamelMessage_ReportToAgvs::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Communication.CamelMessage.ReportToAgvs.version)
}
inline void CamelMessage_ReportToAgvs::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Communication.CamelMessage.ReportToAgvs.version)
}
inline std::string* CamelMessage_ReportToAgvs::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CamelMessage_ReportToAgvs::release_version() {
  // @@protoc_insertion_point(field_release:Communication.CamelMessage.ReportToAgvs.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CamelMessage_ReportToAgvs::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Communication.CamelMessage.ReportToAgvs.version)
}

// float battery = 3;
inline void CamelMessage_ReportToAgvs::clear_battery() {
  battery_ = 0;
}
inline float CamelMessage_ReportToAgvs::_internal_battery() const {
  return battery_;
}
inline float CamelMessage_ReportToAgvs::battery() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.ReportToAgvs.battery)
  return _internal_battery();
}
inline void CamelMessage_ReportToAgvs::_internal_set_battery(float value) {
  
  battery_ = value;
}
inline void CamelMessage_ReportToAgvs::set_battery(float value) {
  _internal_set_battery(value);
  // @@protoc_insertion_point(field_set:Communication.CamelMessage.ReportToAgvs.battery)
}

// bool isCharging = 4;
inline void CamelMessage_ReportToAgvs::clear_ischarging() {
  ischarging_ = false;
}
inline bool CamelMessage_ReportToAgvs::_internal_ischarging() const {
  return ischarging_;
}
inline bool CamelMessage_ReportToAgvs::ischarging() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.ReportToAgvs.isCharging)
  return _internal_ischarging();
}
inline void CamelMessage_ReportToAgvs::_internal_set_ischarging(bool value) {
  
  ischarging_ = value;
}
inline void CamelMessage_ReportToAgvs::set_ischarging(bool value) {
  _internal_set_ischarging(value);
  // @@protoc_insertion_point(field_set:Communication.CamelMessage.ReportToAgvs.isCharging)
}

// repeated .Communication.Device devices = 5;
inline int CamelMessage_ReportToAgvs::_internal_devices_size() const {
  return devices_.size();
}
inline int CamelMessage_ReportToAgvs::devices_size() const {
  return _internal_devices_size();
}
inline void CamelMessage_ReportToAgvs::clear_devices() {
  devices_.Clear();
}
inline ::Communication::Device* CamelMessage_ReportToAgvs::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.ReportToAgvs.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Communication::Device >*
CamelMessage_ReportToAgvs::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:Communication.CamelMessage.ReportToAgvs.devices)
  return &devices_;
}
inline const ::Communication::Device& CamelMessage_ReportToAgvs::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::Communication::Device& CamelMessage_ReportToAgvs::devices(int index) const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.ReportToAgvs.devices)
  return _internal_devices(index);
}
inline ::Communication::Device* CamelMessage_ReportToAgvs::_internal_add_devices() {
  return devices_.Add();
}
inline ::Communication::Device* CamelMessage_ReportToAgvs::add_devices() {
  // @@protoc_insertion_point(field_add:Communication.CamelMessage.ReportToAgvs.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Communication::Device >&
CamelMessage_ReportToAgvs::devices() const {
  // @@protoc_insertion_point(field_list:Communication.CamelMessage.ReportToAgvs.devices)
  return devices_;
}

// .Communication.Posion posion = 6;
inline bool CamelMessage_ReportToAgvs::_internal_has_posion() const {
  return this != internal_default_instance() && posion_ != nullptr;
}
inline bool CamelMessage_ReportToAgvs::has_posion() const {
  return _internal_has_posion();
}
inline void CamelMessage_ReportToAgvs::clear_posion() {
  if (GetArenaNoVirtual() == nullptr && posion_ != nullptr) {
    delete posion_;
  }
  posion_ = nullptr;
}
inline const ::Communication::Posion& CamelMessage_ReportToAgvs::_internal_posion() const {
  const ::Communication::Posion* p = posion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Communication::Posion*>(
      &::Communication::_Posion_default_instance_);
}
inline const ::Communication::Posion& CamelMessage_ReportToAgvs::posion() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.ReportToAgvs.posion)
  return _internal_posion();
}
inline ::Communication::Posion* CamelMessage_ReportToAgvs::release_posion() {
  // @@protoc_insertion_point(field_release:Communication.CamelMessage.ReportToAgvs.posion)
  
  ::Communication::Posion* temp = posion_;
  posion_ = nullptr;
  return temp;
}
inline ::Communication::Posion* CamelMessage_ReportToAgvs::_internal_mutable_posion() {
  
  if (posion_ == nullptr) {
    auto* p = CreateMaybeMessage<::Communication::Posion>(GetArenaNoVirtual());
    posion_ = p;
  }
  return posion_;
}
inline ::Communication::Posion* CamelMessage_ReportToAgvs::mutable_posion() {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.ReportToAgvs.posion)
  return _internal_mutable_posion();
}
inline void CamelMessage_ReportToAgvs::set_allocated_posion(::Communication::Posion* posion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete posion_;
  }
  if (posion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      posion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posion, submessage_arena);
    }
    
  } else {
    
  }
  posion_ = posion;
  // @@protoc_insertion_point(field_set_allocated:Communication.CamelMessage.ReportToAgvs.posion)
}

// -------------------------------------------------------------------

// CamelMessage_MissonFromAgvs

// string route = 1;
inline void CamelMessage_MissonFromAgvs::clear_route() {
  route_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CamelMessage_MissonFromAgvs::route() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.MissonFromAgvs.route)
  return _internal_route();
}
inline void CamelMessage_MissonFromAgvs::set_route(const std::string& value) {
  _internal_set_route(value);
  // @@protoc_insertion_point(field_set:Communication.CamelMessage.MissonFromAgvs.route)
}
inline std::string* CamelMessage_MissonFromAgvs::mutable_route() {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.MissonFromAgvs.route)
  return _internal_mutable_route();
}
inline const std::string& CamelMessage_MissonFromAgvs::_internal_route() const {
  return route_.GetNoArena();
}
inline void CamelMessage_MissonFromAgvs::_internal_set_route(const std::string& value) {
  
  route_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CamelMessage_MissonFromAgvs::set_route(std::string&& value) {
  
  route_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Communication.CamelMessage.MissonFromAgvs.route)
}
inline void CamelMessage_MissonFromAgvs::set_route(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Communication.CamelMessage.MissonFromAgvs.route)
}
inline void CamelMessage_MissonFromAgvs::set_route(const char* value, size_t size) {
  
  route_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Communication.CamelMessage.MissonFromAgvs.route)
}
inline std::string* CamelMessage_MissonFromAgvs::_internal_mutable_route() {
  
  return route_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CamelMessage_MissonFromAgvs::release_route() {
  // @@protoc_insertion_point(field_release:Communication.CamelMessage.MissonFromAgvs.route)
  
  return route_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CamelMessage_MissonFromAgvs::set_allocated_route(std::string* route) {
  if (route != nullptr) {
    
  } else {
    
  }
  route_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route);
  // @@protoc_insertion_point(field_set_allocated:Communication.CamelMessage.MissonFromAgvs.route)
}

// string actionType = 2;
inline void CamelMessage_MissonFromAgvs::clear_actiontype() {
  actiontype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CamelMessage_MissonFromAgvs::actiontype() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.MissonFromAgvs.actionType)
  return _internal_actiontype();
}
inline void CamelMessage_MissonFromAgvs::set_actiontype(const std::string& value) {
  _internal_set_actiontype(value);
  // @@protoc_insertion_point(field_set:Communication.CamelMessage.MissonFromAgvs.actionType)
}
inline std::string* CamelMessage_MissonFromAgvs::mutable_actiontype() {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.MissonFromAgvs.actionType)
  return _internal_mutable_actiontype();
}
inline const std::string& CamelMessage_MissonFromAgvs::_internal_actiontype() const {
  return actiontype_.GetNoArena();
}
inline void CamelMessage_MissonFromAgvs::_internal_set_actiontype(const std::string& value) {
  
  actiontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CamelMessage_MissonFromAgvs::set_actiontype(std::string&& value) {
  
  actiontype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Communication.CamelMessage.MissonFromAgvs.actionType)
}
inline void CamelMessage_MissonFromAgvs::set_actiontype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actiontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Communication.CamelMessage.MissonFromAgvs.actionType)
}
inline void CamelMessage_MissonFromAgvs::set_actiontype(const char* value, size_t size) {
  
  actiontype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Communication.CamelMessage.MissonFromAgvs.actionType)
}
inline std::string* CamelMessage_MissonFromAgvs::_internal_mutable_actiontype() {
  
  return actiontype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CamelMessage_MissonFromAgvs::release_actiontype() {
  // @@protoc_insertion_point(field_release:Communication.CamelMessage.MissonFromAgvs.actionType)
  
  return actiontype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CamelMessage_MissonFromAgvs::set_allocated_actiontype(std::string* actiontype) {
  if (actiontype != nullptr) {
    
  } else {
    
  }
  actiontype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actiontype);
  // @@protoc_insertion_point(field_set_allocated:Communication.CamelMessage.MissonFromAgvs.actionType)
}

// .Communication.Task task = 3;
inline bool CamelMessage_MissonFromAgvs::_internal_has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline bool CamelMessage_MissonFromAgvs::has_task() const {
  return _internal_has_task();
}
inline void CamelMessage_MissonFromAgvs::clear_task() {
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::Communication::Task& CamelMessage_MissonFromAgvs::_internal_task() const {
  const ::Communication::Task* p = task_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Communication::Task*>(
      &::Communication::_Task_default_instance_);
}
inline const ::Communication::Task& CamelMessage_MissonFromAgvs::task() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.MissonFromAgvs.task)
  return _internal_task();
}
inline ::Communication::Task* CamelMessage_MissonFromAgvs::release_task() {
  // @@protoc_insertion_point(field_release:Communication.CamelMessage.MissonFromAgvs.task)
  
  ::Communication::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::Communication::Task* CamelMessage_MissonFromAgvs::_internal_mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::Communication::Task>(GetArenaNoVirtual());
    task_ = p;
  }
  return task_;
}
inline ::Communication::Task* CamelMessage_MissonFromAgvs::mutable_task() {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.MissonFromAgvs.task)
  return _internal_mutable_task();
}
inline void CamelMessage_MissonFromAgvs::set_allocated_task(::Communication::Task* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:Communication.CamelMessage.MissonFromAgvs.task)
}

// -------------------------------------------------------------------

// CamelMessage_RequestToAgvs

// bool getMissonInfo = 1;
inline void CamelMessage_RequestToAgvs::clear_getmissoninfo() {
  getmissoninfo_ = false;
}
inline bool CamelMessage_RequestToAgvs::_internal_getmissoninfo() const {
  return getmissoninfo_;
}
inline bool CamelMessage_RequestToAgvs::getmissoninfo() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.RequestToAgvs.getMissonInfo)
  return _internal_getmissoninfo();
}
inline void CamelMessage_RequestToAgvs::_internal_set_getmissoninfo(bool value) {
  
  getmissoninfo_ = value;
}
inline void CamelMessage_RequestToAgvs::set_getmissoninfo(bool value) {
  _internal_set_getmissoninfo(value);
  // @@protoc_insertion_point(field_set:Communication.CamelMessage.RequestToAgvs.getMissonInfo)
}

// bool setUseable = 2;
inline void CamelMessage_RequestToAgvs::clear_setuseable() {
  setuseable_ = false;
}
inline bool CamelMessage_RequestToAgvs::_internal_setuseable() const {
  return setuseable_;
}
inline bool CamelMessage_RequestToAgvs::setuseable() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.RequestToAgvs.setUseable)
  return _internal_setuseable();
}
inline void CamelMessage_RequestToAgvs::_internal_set_setuseable(bool value) {
  
  setuseable_ = value;
}
inline void CamelMessage_RequestToAgvs::set_setuseable(bool value) {
  _internal_set_setuseable(value);
  // @@protoc_insertion_point(field_set:Communication.CamelMessage.RequestToAgvs.setUseable)
}

// bool cancelTask = 3;
inline void CamelMessage_RequestToAgvs::clear_canceltask() {
  canceltask_ = false;
}
inline bool CamelMessage_RequestToAgvs::_internal_canceltask() const {
  return canceltask_;
}
inline bool CamelMessage_RequestToAgvs::canceltask() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.RequestToAgvs.cancelTask)
  return _internal_canceltask();
}
inline void CamelMessage_RequestToAgvs::_internal_set_canceltask(bool value) {
  
  canceltask_ = value;
}
inline void CamelMessage_RequestToAgvs::set_canceltask(bool value) {
  _internal_set_canceltask(value);
  // @@protoc_insertion_point(field_set:Communication.CamelMessage.RequestToAgvs.cancelTask)
}

// bool requestCharging = 4;
inline void CamelMessage_RequestToAgvs::clear_requestcharging() {
  requestcharging_ = false;
}
inline bool CamelMessage_RequestToAgvs::_internal_requestcharging() const {
  return requestcharging_;
}
inline bool CamelMessage_RequestToAgvs::requestcharging() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.RequestToAgvs.requestCharging)
  return _internal_requestcharging();
}
inline void CamelMessage_RequestToAgvs::_internal_set_requestcharging(bool value) {
  
  requestcharging_ = value;
}
inline void CamelMessage_RequestToAgvs::set_requestcharging(bool value) {
  _internal_set_requestcharging(value);
  // @@protoc_insertion_point(field_set:Communication.CamelMessage.RequestToAgvs.requestCharging)
}

// -------------------------------------------------------------------

// CamelMessage

// .Communication.CamelMessage.AllowFromAgvs allowFromAgvs = 1;
inline bool CamelMessage::_internal_has_allowfromagvs() const {
  return onlyone_case() == kAllowFromAgvs;
}
inline bool CamelMessage::has_allowfromagvs() const {
  return _internal_has_allowfromagvs();
}
inline void CamelMessage::set_has_allowfromagvs() {
  _oneof_case_[0] = kAllowFromAgvs;
}
inline void CamelMessage::clear_allowfromagvs() {
  if (_internal_has_allowfromagvs()) {
    delete onlyone_.allowfromagvs_;
    clear_has_onlyone();
  }
}
inline ::Communication::CamelMessage_AllowFromAgvs* CamelMessage::release_allowfromagvs() {
  // @@protoc_insertion_point(field_release:Communication.CamelMessage.allowFromAgvs)
  if (_internal_has_allowfromagvs()) {
    clear_has_onlyone();
      ::Communication::CamelMessage_AllowFromAgvs* temp = onlyone_.allowfromagvs_;
    onlyone_.allowfromagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Communication::CamelMessage_AllowFromAgvs& CamelMessage::_internal_allowfromagvs() const {
  return _internal_has_allowfromagvs()
      ? *onlyone_.allowfromagvs_
      : *reinterpret_cast< ::Communication::CamelMessage_AllowFromAgvs*>(&::Communication::_CamelMessage_AllowFromAgvs_default_instance_);
}
inline const ::Communication::CamelMessage_AllowFromAgvs& CamelMessage::allowfromagvs() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.allowFromAgvs)
  return _internal_allowfromagvs();
}
inline ::Communication::CamelMessage_AllowFromAgvs* CamelMessage::_internal_mutable_allowfromagvs() {
  if (!_internal_has_allowfromagvs()) {
    clear_onlyone();
    set_has_allowfromagvs();
    onlyone_.allowfromagvs_ = CreateMaybeMessage< ::Communication::CamelMessage_AllowFromAgvs >(
        GetArenaNoVirtual());
  }
  return onlyone_.allowfromagvs_;
}
inline ::Communication::CamelMessage_AllowFromAgvs* CamelMessage::mutable_allowfromagvs() {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.allowFromAgvs)
  return _internal_mutable_allowfromagvs();
}

// .Communication.CamelMessage.ReportToAgvs reportToAgvs = 2;
inline bool CamelMessage::_internal_has_reporttoagvs() const {
  return onlyone_case() == kReportToAgvs;
}
inline bool CamelMessage::has_reporttoagvs() const {
  return _internal_has_reporttoagvs();
}
inline void CamelMessage::set_has_reporttoagvs() {
  _oneof_case_[0] = kReportToAgvs;
}
inline void CamelMessage::clear_reporttoagvs() {
  if (_internal_has_reporttoagvs()) {
    delete onlyone_.reporttoagvs_;
    clear_has_onlyone();
  }
}
inline ::Communication::CamelMessage_ReportToAgvs* CamelMessage::release_reporttoagvs() {
  // @@protoc_insertion_point(field_release:Communication.CamelMessage.reportToAgvs)
  if (_internal_has_reporttoagvs()) {
    clear_has_onlyone();
      ::Communication::CamelMessage_ReportToAgvs* temp = onlyone_.reporttoagvs_;
    onlyone_.reporttoagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Communication::CamelMessage_ReportToAgvs& CamelMessage::_internal_reporttoagvs() const {
  return _internal_has_reporttoagvs()
      ? *onlyone_.reporttoagvs_
      : *reinterpret_cast< ::Communication::CamelMessage_ReportToAgvs*>(&::Communication::_CamelMessage_ReportToAgvs_default_instance_);
}
inline const ::Communication::CamelMessage_ReportToAgvs& CamelMessage::reporttoagvs() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.reportToAgvs)
  return _internal_reporttoagvs();
}
inline ::Communication::CamelMessage_ReportToAgvs* CamelMessage::_internal_mutable_reporttoagvs() {
  if (!_internal_has_reporttoagvs()) {
    clear_onlyone();
    set_has_reporttoagvs();
    onlyone_.reporttoagvs_ = CreateMaybeMessage< ::Communication::CamelMessage_ReportToAgvs >(
        GetArenaNoVirtual());
  }
  return onlyone_.reporttoagvs_;
}
inline ::Communication::CamelMessage_ReportToAgvs* CamelMessage::mutable_reporttoagvs() {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.reportToAgvs)
  return _internal_mutable_reporttoagvs();
}

// .Communication.CamelMessage.MissonFromAgvs missonFromAgvs = 3;
inline bool CamelMessage::_internal_has_missonfromagvs() const {
  return onlyone_case() == kMissonFromAgvs;
}
inline bool CamelMessage::has_missonfromagvs() const {
  return _internal_has_missonfromagvs();
}
inline void CamelMessage::set_has_missonfromagvs() {
  _oneof_case_[0] = kMissonFromAgvs;
}
inline void CamelMessage::clear_missonfromagvs() {
  if (_internal_has_missonfromagvs()) {
    delete onlyone_.missonfromagvs_;
    clear_has_onlyone();
  }
}
inline ::Communication::CamelMessage_MissonFromAgvs* CamelMessage::release_missonfromagvs() {
  // @@protoc_insertion_point(field_release:Communication.CamelMessage.missonFromAgvs)
  if (_internal_has_missonfromagvs()) {
    clear_has_onlyone();
      ::Communication::CamelMessage_MissonFromAgvs* temp = onlyone_.missonfromagvs_;
    onlyone_.missonfromagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Communication::CamelMessage_MissonFromAgvs& CamelMessage::_internal_missonfromagvs() const {
  return _internal_has_missonfromagvs()
      ? *onlyone_.missonfromagvs_
      : *reinterpret_cast< ::Communication::CamelMessage_MissonFromAgvs*>(&::Communication::_CamelMessage_MissonFromAgvs_default_instance_);
}
inline const ::Communication::CamelMessage_MissonFromAgvs& CamelMessage::missonfromagvs() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.missonFromAgvs)
  return _internal_missonfromagvs();
}
inline ::Communication::CamelMessage_MissonFromAgvs* CamelMessage::_internal_mutable_missonfromagvs() {
  if (!_internal_has_missonfromagvs()) {
    clear_onlyone();
    set_has_missonfromagvs();
    onlyone_.missonfromagvs_ = CreateMaybeMessage< ::Communication::CamelMessage_MissonFromAgvs >(
        GetArenaNoVirtual());
  }
  return onlyone_.missonfromagvs_;
}
inline ::Communication::CamelMessage_MissonFromAgvs* CamelMessage::mutable_missonfromagvs() {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.missonFromAgvs)
  return _internal_mutable_missonfromagvs();
}

// .Communication.CamelMessage.RequestToAgvs requestToAgvs = 4;
inline bool CamelMessage::_internal_has_requesttoagvs() const {
  return onlyone_case() == kRequestToAgvs;
}
inline bool CamelMessage::has_requesttoagvs() const {
  return _internal_has_requesttoagvs();
}
inline void CamelMessage::set_has_requesttoagvs() {
  _oneof_case_[0] = kRequestToAgvs;
}
inline void CamelMessage::clear_requesttoagvs() {
  if (_internal_has_requesttoagvs()) {
    delete onlyone_.requesttoagvs_;
    clear_has_onlyone();
  }
}
inline ::Communication::CamelMessage_RequestToAgvs* CamelMessage::release_requesttoagvs() {
  // @@protoc_insertion_point(field_release:Communication.CamelMessage.requestToAgvs)
  if (_internal_has_requesttoagvs()) {
    clear_has_onlyone();
      ::Communication::CamelMessage_RequestToAgvs* temp = onlyone_.requesttoagvs_;
    onlyone_.requesttoagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Communication::CamelMessage_RequestToAgvs& CamelMessage::_internal_requesttoagvs() const {
  return _internal_has_requesttoagvs()
      ? *onlyone_.requesttoagvs_
      : *reinterpret_cast< ::Communication::CamelMessage_RequestToAgvs*>(&::Communication::_CamelMessage_RequestToAgvs_default_instance_);
}
inline const ::Communication::CamelMessage_RequestToAgvs& CamelMessage::requesttoagvs() const {
  // @@protoc_insertion_point(field_get:Communication.CamelMessage.requestToAgvs)
  return _internal_requesttoagvs();
}
inline ::Communication::CamelMessage_RequestToAgvs* CamelMessage::_internal_mutable_requesttoagvs() {
  if (!_internal_has_requesttoagvs()) {
    clear_onlyone();
    set_has_requesttoagvs();
    onlyone_.requesttoagvs_ = CreateMaybeMessage< ::Communication::CamelMessage_RequestToAgvs >(
        GetArenaNoVirtual());
  }
  return onlyone_.requesttoagvs_;
}
inline ::Communication::CamelMessage_RequestToAgvs* CamelMessage::mutable_requesttoagvs() {
  // @@protoc_insertion_point(field_mutable:Communication.CamelMessage.requestToAgvs)
  return _internal_mutable_requesttoagvs();
}

inline bool CamelMessage::has_onlyone() const {
  return onlyone_case() != ONLYONE_NOT_SET;
}
inline void CamelMessage::clear_has_onlyone() {
  _oneof_case_[0] = ONLYONE_NOT_SET;
}
inline CamelMessage::OnlyoneCase CamelMessage::onlyone_case() const {
  return CamelMessage::OnlyoneCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Posion

// float X = 1;
inline void Posion::clear_x() {
  x_ = 0;
}
inline float Posion::_internal_x() const {
  return x_;
}
inline float Posion::x() const {
  // @@protoc_insertion_point(field_get:Communication.Posion.X)
  return _internal_x();
}
inline void Posion::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Posion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Communication.Posion.X)
}

// float Y = 2;
inline void Posion::clear_y() {
  y_ = 0;
}
inline float Posion::_internal_y() const {
  return y_;
}
inline float Posion::y() const {
  // @@protoc_insertion_point(field_get:Communication.Posion.Y)
  return _internal_y();
}
inline void Posion::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Posion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Communication.Posion.Y)
}

// float Theta = 3;
inline void Posion::clear_theta() {
  theta_ = 0;
}
inline float Posion::_internal_theta() const {
  return theta_;
}
inline float Posion::theta() const {
  // @@protoc_insertion_point(field_get:Communication.Posion.Theta)
  return _internal_theta();
}
inline void Posion::_internal_set_theta(float value) {
  
  theta_ = value;
}
inline void Posion::set_theta(float value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:Communication.Posion.Theta)
}

// -------------------------------------------------------------------

// Device

// int32 id = 1;
inline void Device::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Device::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Device::id() const {
  // @@protoc_insertion_point(field_get:Communication.Device.id)
  return _internal_id();
}
inline void Device::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Device::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Communication.Device.id)
}

// string name = 2;
inline void Device::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:Communication.Device.name)
  return _internal_name();
}
inline void Device::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Communication.Device.name)
}
inline std::string* Device::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Communication.Device.name)
  return _internal_mutable_name();
}
inline const std::string& Device::_internal_name() const {
  return name_.GetNoArena();
}
inline void Device::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Device::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Communication.Device.name)
}
inline void Device::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Communication.Device.name)
}
inline void Device::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Communication.Device.name)
}
inline std::string* Device::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Device::release_name() {
  // @@protoc_insertion_point(field_release:Communication.Device.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Communication.Device.name)
}

// float value = 4;
inline void Device::clear_value() {
  value_ = 0;
}
inline float Device::_internal_value() const {
  return value_;
}
inline float Device::value() const {
  // @@protoc_insertion_point(field_get:Communication.Device.value)
  return _internal_value();
}
inline void Device::_internal_set_value(float value) {
  
  value_ = value;
}
inline void Device::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Communication.Device.value)
}

// bool isActivate = 3;
inline void Device::clear_isactivate() {
  isactivate_ = false;
}
inline bool Device::_internal_isactivate() const {
  return isactivate_;
}
inline bool Device::isactivate() const {
  // @@protoc_insertion_point(field_get:Communication.Device.isActivate)
  return _internal_isactivate();
}
inline void Device::_internal_set_isactivate(bool value) {
  
  isactivate_ = value;
}
inline void Device::set_isactivate(bool value) {
  _internal_set_isactivate(value);
  // @@protoc_insertion_point(field_set:Communication.Device.isActivate)
}

// -------------------------------------------------------------------

// AgvInAgvs

// string name = 1;
inline void AgvInAgvs::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AgvInAgvs::name() const {
  // @@protoc_insertion_point(field_get:Communication.AgvInAgvs.name)
  return _internal_name();
}
inline void AgvInAgvs::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Communication.AgvInAgvs.name)
}
inline std::string* AgvInAgvs::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Communication.AgvInAgvs.name)
  return _internal_mutable_name();
}
inline const std::string& AgvInAgvs::_internal_name() const {
  return name_.GetNoArena();
}
inline void AgvInAgvs::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AgvInAgvs::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Communication.AgvInAgvs.name)
}
inline void AgvInAgvs::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Communication.AgvInAgvs.name)
}
inline void AgvInAgvs::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Communication.AgvInAgvs.name)
}
inline std::string* AgvInAgvs::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AgvInAgvs::release_name() {
  // @@protoc_insertion_point(field_release:Communication.AgvInAgvs.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AgvInAgvs::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Communication.AgvInAgvs.name)
}

// string currentStation = 2;
inline void AgvInAgvs::clear_currentstation() {
  currentstation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AgvInAgvs::currentstation() const {
  // @@protoc_insertion_point(field_get:Communication.AgvInAgvs.currentStation)
  return _internal_currentstation();
}
inline void AgvInAgvs::set_currentstation(const std::string& value) {
  _internal_set_currentstation(value);
  // @@protoc_insertion_point(field_set:Communication.AgvInAgvs.currentStation)
}
inline std::string* AgvInAgvs::mutable_currentstation() {
  // @@protoc_insertion_point(field_mutable:Communication.AgvInAgvs.currentStation)
  return _internal_mutable_currentstation();
}
inline const std::string& AgvInAgvs::_internal_currentstation() const {
  return currentstation_.GetNoArena();
}
inline void AgvInAgvs::_internal_set_currentstation(const std::string& value) {
  
  currentstation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AgvInAgvs::set_currentstation(std::string&& value) {
  
  currentstation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Communication.AgvInAgvs.currentStation)
}
inline void AgvInAgvs::set_currentstation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currentstation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Communication.AgvInAgvs.currentStation)
}
inline void AgvInAgvs::set_currentstation(const char* value, size_t size) {
  
  currentstation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Communication.AgvInAgvs.currentStation)
}
inline std::string* AgvInAgvs::_internal_mutable_currentstation() {
  
  return currentstation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AgvInAgvs::release_currentstation() {
  // @@protoc_insertion_point(field_release:Communication.AgvInAgvs.currentStation)
  
  return currentstation_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AgvInAgvs::set_allocated_currentstation(std::string* currentstation) {
  if (currentstation != nullptr) {
    
  } else {
    
  }
  currentstation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currentstation);
  // @@protoc_insertion_point(field_set_allocated:Communication.AgvInAgvs.currentStation)
}

// string targetStation = 3;
inline void AgvInAgvs::clear_targetstation() {
  targetstation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AgvInAgvs::targetstation() const {
  // @@protoc_insertion_point(field_get:Communication.AgvInAgvs.targetStation)
  return _internal_targetstation();
}
inline void AgvInAgvs::set_targetstation(const std::string& value) {
  _internal_set_targetstation(value);
  // @@protoc_insertion_point(field_set:Communication.AgvInAgvs.targetStation)
}
inline std::string* AgvInAgvs::mutable_targetstation() {
  // @@protoc_insertion_point(field_mutable:Communication.AgvInAgvs.targetStation)
  return _internal_mutable_targetstation();
}
inline const std::string& AgvInAgvs::_internal_targetstation() const {
  return targetstation_.GetNoArena();
}
inline void AgvInAgvs::_internal_set_targetstation(const std::string& value) {
  
  targetstation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AgvInAgvs::set_targetstation(std::string&& value) {
  
  targetstation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Communication.AgvInAgvs.targetStation)
}
inline void AgvInAgvs::set_targetstation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetstation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Communication.AgvInAgvs.targetStation)
}
inline void AgvInAgvs::set_targetstation(const char* value, size_t size) {
  
  targetstation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Communication.AgvInAgvs.targetStation)
}
inline std::string* AgvInAgvs::_internal_mutable_targetstation() {
  
  return targetstation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AgvInAgvs::release_targetstation() {
  // @@protoc_insertion_point(field_release:Communication.AgvInAgvs.targetStation)
  
  return targetstation_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AgvInAgvs::set_allocated_targetstation(std::string* targetstation) {
  if (targetstation != nullptr) {
    
  } else {
    
  }
  targetstation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetstation);
  // @@protoc_insertion_point(field_set_allocated:Communication.AgvInAgvs.targetStation)
}

// bool isUseable = 4;
inline void AgvInAgvs::clear_isuseable() {
  isuseable_ = false;
}
inline bool AgvInAgvs::_internal_isuseable() const {
  return isuseable_;
}
inline bool AgvInAgvs::isuseable() const {
  // @@protoc_insertion_point(field_get:Communication.AgvInAgvs.isUseable)
  return _internal_isuseable();
}
inline void AgvInAgvs::_internal_set_isuseable(bool value) {
  
  isuseable_ = value;
}
inline void AgvInAgvs::set_isuseable(bool value) {
  _internal_set_isuseable(value);
  // @@protoc_insertion_point(field_set:Communication.AgvInAgvs.isUseable)
}

// bool hasTask = 5;
inline void AgvInAgvs::clear_hastask() {
  hastask_ = false;
}
inline bool AgvInAgvs::_internal_hastask() const {
  return hastask_;
}
inline bool AgvInAgvs::hastask() const {
  // @@protoc_insertion_point(field_get:Communication.AgvInAgvs.hasTask)
  return _internal_hastask();
}
inline void AgvInAgvs::_internal_set_hastask(bool value) {
  
  hastask_ = value;
}
inline void AgvInAgvs::set_hastask(bool value) {
  _internal_set_hastask(value);
  // @@protoc_insertion_point(field_set:Communication.AgvInAgvs.hasTask)
}

// -------------------------------------------------------------------

// Task

// string from = 1;
inline void Task::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::from() const {
  // @@protoc_insertion_point(field_get:Communication.Task.from)
  return _internal_from();
}
inline void Task::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:Communication.Task.from)
}
inline std::string* Task::mutable_from() {
  // @@protoc_insertion_point(field_mutable:Communication.Task.from)
  return _internal_mutable_from();
}
inline const std::string& Task::_internal_from() const {
  return from_.GetNoArena();
}
inline void Task::_internal_set_from(const std::string& value) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_from(std::string&& value) {
  
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Communication.Task.from)
}
inline void Task::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Communication.Task.from)
}
inline void Task::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Communication.Task.from)
}
inline std::string* Task::_internal_mutable_from() {
  
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_from() {
  // @@protoc_insertion_point(field_release:Communication.Task.from)
  
  return from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:Communication.Task.from)
}

// string to = 2;
inline void Task::clear_to() {
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Task::to() const {
  // @@protoc_insertion_point(field_get:Communication.Task.to)
  return _internal_to();
}
inline void Task::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:Communication.Task.to)
}
inline std::string* Task::mutable_to() {
  // @@protoc_insertion_point(field_mutable:Communication.Task.to)
  return _internal_mutable_to();
}
inline const std::string& Task::_internal_to() const {
  return to_.GetNoArena();
}
inline void Task::_internal_set_to(const std::string& value) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Task::set_to(std::string&& value) {
  
  to_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Communication.Task.to)
}
inline void Task::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Communication.Task.to)
}
inline void Task::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Communication.Task.to)
}
inline std::string* Task::_internal_mutable_to() {
  
  return to_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Task::release_to() {
  // @@protoc_insertion_point(field_release:Communication.Task.to)
  
  return to_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:Communication.Task.to)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Communication

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_camel_2dagvs_2dcommunication_2eproto
