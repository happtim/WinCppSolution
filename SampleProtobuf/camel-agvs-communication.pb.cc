// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camel-agvs-communication.proto

#include "camel-agvs-communication.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_camel_2dagvs_2dcommunication_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInAgvs_camel_2dagvs_2dcommunication_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camel_2dagvs_2dcommunication_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CamelMessage_AllowFromAgvs_camel_2dagvs_2dcommunication_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camel_2dagvs_2dcommunication_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CamelMessage_MissonFromAgvs_camel_2dagvs_2dcommunication_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camel_2dagvs_2dcommunication_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CamelMessage_ReportToAgvs_camel_2dagvs_2dcommunication_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camel_2dagvs_2dcommunication_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CamelMessage_RequestToAgvs_camel_2dagvs_2dcommunication_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camel_2dagvs_2dcommunication_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_camel_2dagvs_2dcommunication_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camel_2dagvs_2dcommunication_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Posion_camel_2dagvs_2dcommunication_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camel_2dagvs_2dcommunication_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Task_camel_2dagvs_2dcommunication_2eproto;
namespace Communication {
class CamelMessage_AllowFromAgvsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CamelMessage_AllowFromAgvs> _instance;
} _CamelMessage_AllowFromAgvs_default_instance_;
class CamelMessage_ReportToAgvsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CamelMessage_ReportToAgvs> _instance;
} _CamelMessage_ReportToAgvs_default_instance_;
class CamelMessage_MissonFromAgvsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CamelMessage_MissonFromAgvs> _instance;
} _CamelMessage_MissonFromAgvs_default_instance_;
class CamelMessage_RequestToAgvsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CamelMessage_RequestToAgvs> _instance;
} _CamelMessage_RequestToAgvs_default_instance_;
class CamelMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CamelMessage> _instance;
  const ::Communication::CamelMessage_AllowFromAgvs* allowfromagvs_;
  const ::Communication::CamelMessage_ReportToAgvs* reporttoagvs_;
  const ::Communication::CamelMessage_MissonFromAgvs* missonfromagvs_;
  const ::Communication::CamelMessage_RequestToAgvs* requesttoagvs_;
} _CamelMessage_default_instance_;
class PosionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Posion> _instance;
} _Posion_default_instance_;
class DeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Device> _instance;
} _Device_default_instance_;
class AgvInAgvsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgvInAgvs> _instance;
} _AgvInAgvs_default_instance_;
class TaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task> _instance;
} _Task_default_instance_;
}  // namespace Communication
static void InitDefaultsscc_info_AgvInAgvs_camel_2dagvs_2dcommunication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Communication::_AgvInAgvs_default_instance_;
    new (ptr) ::Communication::AgvInAgvs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Communication::AgvInAgvs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInAgvs_camel_2dagvs_2dcommunication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgvInAgvs_camel_2dagvs_2dcommunication_2eproto}, {}};

static void InitDefaultsscc_info_CamelMessage_camel_2dagvs_2dcommunication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Communication::_CamelMessage_default_instance_;
    new (ptr) ::Communication::CamelMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Communication::CamelMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CamelMessage_camel_2dagvs_2dcommunication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CamelMessage_camel_2dagvs_2dcommunication_2eproto}, {
      &scc_info_CamelMessage_AllowFromAgvs_camel_2dagvs_2dcommunication_2eproto.base,
      &scc_info_CamelMessage_ReportToAgvs_camel_2dagvs_2dcommunication_2eproto.base,
      &scc_info_CamelMessage_MissonFromAgvs_camel_2dagvs_2dcommunication_2eproto.base,
      &scc_info_CamelMessage_RequestToAgvs_camel_2dagvs_2dcommunication_2eproto.base,}};

static void InitDefaultsscc_info_CamelMessage_AllowFromAgvs_camel_2dagvs_2dcommunication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Communication::_CamelMessage_AllowFromAgvs_default_instance_;
    new (ptr) ::Communication::CamelMessage_AllowFromAgvs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Communication::CamelMessage_AllowFromAgvs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CamelMessage_AllowFromAgvs_camel_2dagvs_2dcommunication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CamelMessage_AllowFromAgvs_camel_2dagvs_2dcommunication_2eproto}, {
      &scc_info_AgvInAgvs_camel_2dagvs_2dcommunication_2eproto.base,}};

static void InitDefaultsscc_info_CamelMessage_MissonFromAgvs_camel_2dagvs_2dcommunication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Communication::_CamelMessage_MissonFromAgvs_default_instance_;
    new (ptr) ::Communication::CamelMessage_MissonFromAgvs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Communication::CamelMessage_MissonFromAgvs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CamelMessage_MissonFromAgvs_camel_2dagvs_2dcommunication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CamelMessage_MissonFromAgvs_camel_2dagvs_2dcommunication_2eproto}, {
      &scc_info_Task_camel_2dagvs_2dcommunication_2eproto.base,}};

static void InitDefaultsscc_info_CamelMessage_ReportToAgvs_camel_2dagvs_2dcommunication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Communication::_CamelMessage_ReportToAgvs_default_instance_;
    new (ptr) ::Communication::CamelMessage_ReportToAgvs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Communication::CamelMessage_ReportToAgvs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CamelMessage_ReportToAgvs_camel_2dagvs_2dcommunication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CamelMessage_ReportToAgvs_camel_2dagvs_2dcommunication_2eproto}, {
      &scc_info_Device_camel_2dagvs_2dcommunication_2eproto.base,
      &scc_info_Posion_camel_2dagvs_2dcommunication_2eproto.base,}};

static void InitDefaultsscc_info_CamelMessage_RequestToAgvs_camel_2dagvs_2dcommunication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Communication::_CamelMessage_RequestToAgvs_default_instance_;
    new (ptr) ::Communication::CamelMessage_RequestToAgvs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Communication::CamelMessage_RequestToAgvs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CamelMessage_RequestToAgvs_camel_2dagvs_2dcommunication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CamelMessage_RequestToAgvs_camel_2dagvs_2dcommunication_2eproto}, {}};

static void InitDefaultsscc_info_Device_camel_2dagvs_2dcommunication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Communication::_Device_default_instance_;
    new (ptr) ::Communication::Device();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Communication::Device::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_camel_2dagvs_2dcommunication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Device_camel_2dagvs_2dcommunication_2eproto}, {}};

static void InitDefaultsscc_info_Posion_camel_2dagvs_2dcommunication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Communication::_Posion_default_instance_;
    new (ptr) ::Communication::Posion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Communication::Posion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Posion_camel_2dagvs_2dcommunication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Posion_camel_2dagvs_2dcommunication_2eproto}, {}};

static void InitDefaultsscc_info_Task_camel_2dagvs_2dcommunication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Communication::_Task_default_instance_;
    new (ptr) ::Communication::Task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Communication::Task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Task_camel_2dagvs_2dcommunication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Task_camel_2dagvs_2dcommunication_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_camel_2dagvs_2dcommunication_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_camel_2dagvs_2dcommunication_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_camel_2dagvs_2dcommunication_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_camel_2dagvs_2dcommunication_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_AllowFromAgvs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_AllowFromAgvs, agv_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_AllowFromAgvs, errormessage_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_AllowFromAgvs, allowcharging_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_AllowFromAgvs, otheragv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_ReportToAgvs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_ReportToAgvs, currentstation_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_ReportToAgvs, version_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_ReportToAgvs, battery_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_ReportToAgvs, ischarging_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_ReportToAgvs, devices_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_ReportToAgvs, posion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_MissonFromAgvs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_MissonFromAgvs, route_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_MissonFromAgvs, actiontype_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_MissonFromAgvs, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_RequestToAgvs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_RequestToAgvs, getmissoninfo_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_RequestToAgvs, setuseable_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_RequestToAgvs, canceltask_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage_RequestToAgvs, requestcharging_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Communication::CamelMessageDefaultTypeInternal, allowfromagvs_),
  offsetof(::Communication::CamelMessageDefaultTypeInternal, reporttoagvs_),
  offsetof(::Communication::CamelMessageDefaultTypeInternal, missonfromagvs_),
  offsetof(::Communication::CamelMessageDefaultTypeInternal, requesttoagvs_),
  PROTOBUF_FIELD_OFFSET(::Communication::CamelMessage, onlyone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Communication::Posion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Communication::Posion, x_),
  PROTOBUF_FIELD_OFFSET(::Communication::Posion, y_),
  PROTOBUF_FIELD_OFFSET(::Communication::Posion, theta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Communication::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Communication::Device, id_),
  PROTOBUF_FIELD_OFFSET(::Communication::Device, name_),
  PROTOBUF_FIELD_OFFSET(::Communication::Device, value_),
  PROTOBUF_FIELD_OFFSET(::Communication::Device, isactivate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Communication::AgvInAgvs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Communication::AgvInAgvs, name_),
  PROTOBUF_FIELD_OFFSET(::Communication::AgvInAgvs, currentstation_),
  PROTOBUF_FIELD_OFFSET(::Communication::AgvInAgvs, targetstation_),
  PROTOBUF_FIELD_OFFSET(::Communication::AgvInAgvs, isuseable_),
  PROTOBUF_FIELD_OFFSET(::Communication::AgvInAgvs, hastask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Communication::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Communication::Task, from_),
  PROTOBUF_FIELD_OFFSET(::Communication::Task, to_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Communication::CamelMessage_AllowFromAgvs)},
  { 9, -1, sizeof(::Communication::CamelMessage_ReportToAgvs)},
  { 20, -1, sizeof(::Communication::CamelMessage_MissonFromAgvs)},
  { 28, -1, sizeof(::Communication::CamelMessage_RequestToAgvs)},
  { 37, -1, sizeof(::Communication::CamelMessage)},
  { 47, -1, sizeof(::Communication::Posion)},
  { 55, -1, sizeof(::Communication::Device)},
  { 64, -1, sizeof(::Communication::AgvInAgvs)},
  { 74, -1, sizeof(::Communication::Task)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Communication::_CamelMessage_AllowFromAgvs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Communication::_CamelMessage_ReportToAgvs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Communication::_CamelMessage_MissonFromAgvs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Communication::_CamelMessage_RequestToAgvs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Communication::_CamelMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Communication::_Posion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Communication::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Communication::_AgvInAgvs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Communication::_Task_default_instance_),
};

const char descriptor_table_protodef_camel_2dagvs_2dcommunication_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036camel-agvs-communication.proto\022\rCommun"
  "ication\"\252\006\n\014CamelMessage\022B\n\rallowFromAgv"
  "s\030\001 \001(\0132).Communication.CamelMessage.All"
  "owFromAgvsH\000\022@\n\014reportToAgvs\030\002 \001(\0132(.Com"
  "munication.CamelMessage.ReportToAgvsH\000\022D"
  "\n\016missonFromAgvs\030\003 \001(\0132*.Communication.C"
  "amelMessage.MissonFromAgvsH\000\022B\n\rrequestT"
  "oAgvs\030\004 \001(\0132).Communication.CamelMessage"
  ".RequestToAgvsH\000\032\217\001\n\rAllowFromAgvs\022%\n\003ag"
  "v\030\001 \001(\0132\030.Communication.AgvInAgvs\022\024\n\014err"
  "orMessage\030\002 \001(\t\022\025\n\rallowCharging\030\003 \001(\010\022*"
  "\n\010otherAgv\030\004 \003(\0132\030.Communication.AgvInAg"
  "vs\032\253\001\n\014ReportToAgvs\022\026\n\016currentStation\030\001 "
  "\001(\t\022\017\n\007version\030\002 \001(\t\022\017\n\007battery\030\003 \001(\002\022\022\n"
  "\nisCharging\030\004 \001(\010\022&\n\007devices\030\005 \003(\0132\025.Com"
  "munication.Device\022%\n\006posion\030\006 \001(\0132\025.Comm"
  "unication.Posion\032V\n\016MissonFromAgvs\022\r\n\005ro"
  "ute\030\001 \001(\t\022\022\n\nactionType\030\002 \001(\t\022!\n\004task\030\003 "
  "\001(\0132\023.Communication.Task\032g\n\rRequestToAgv"
  "s\022\025\n\rgetMissonInfo\030\001 \001(\010\022\022\n\nsetUseable\030\002"
  " \001(\010\022\022\n\ncancelTask\030\003 \001(\010\022\027\n\017requestCharg"
  "ing\030\004 \001(\010B\t\n\007onlyone\"-\n\006Posion\022\t\n\001X\030\001 \001("
  "\002\022\t\n\001Y\030\002 \001(\002\022\r\n\005Theta\030\003 \001(\002\"E\n\006Device\022\n\n"
  "\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\004 \001(\002\022\022"
  "\n\nisActivate\030\003 \001(\010\"l\n\tAgvInAgvs\022\014\n\004name\030"
  "\001 \001(\t\022\026\n\016currentStation\030\002 \001(\t\022\025\n\rtargetS"
  "tation\030\003 \001(\t\022\021\n\tisUseable\030\004 \001(\010\022\017\n\007hasTa"
  "sk\030\005 \001(\010\" \n\004Task\022\014\n\004from\030\001 \001(\t\022\n\n\002to\030\002 \001"
  "(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_camel_2dagvs_2dcommunication_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_camel_2dagvs_2dcommunication_2eproto_sccs[9] = {
  &scc_info_AgvInAgvs_camel_2dagvs_2dcommunication_2eproto.base,
  &scc_info_CamelMessage_camel_2dagvs_2dcommunication_2eproto.base,
  &scc_info_CamelMessage_AllowFromAgvs_camel_2dagvs_2dcommunication_2eproto.base,
  &scc_info_CamelMessage_MissonFromAgvs_camel_2dagvs_2dcommunication_2eproto.base,
  &scc_info_CamelMessage_ReportToAgvs_camel_2dagvs_2dcommunication_2eproto.base,
  &scc_info_CamelMessage_RequestToAgvs_camel_2dagvs_2dcommunication_2eproto.base,
  &scc_info_Device_camel_2dagvs_2dcommunication_2eproto.base,
  &scc_info_Posion_camel_2dagvs_2dcommunication_2eproto.base,
  &scc_info_Task_camel_2dagvs_2dcommunication_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_camel_2dagvs_2dcommunication_2eproto_once;
static bool descriptor_table_camel_2dagvs_2dcommunication_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camel_2dagvs_2dcommunication_2eproto = {
  &descriptor_table_camel_2dagvs_2dcommunication_2eproto_initialized, descriptor_table_protodef_camel_2dagvs_2dcommunication_2eproto, "camel-agvs-communication.proto", 1130,
  &descriptor_table_camel_2dagvs_2dcommunication_2eproto_once, descriptor_table_camel_2dagvs_2dcommunication_2eproto_sccs, descriptor_table_camel_2dagvs_2dcommunication_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_camel_2dagvs_2dcommunication_2eproto::offsets,
  file_level_metadata_camel_2dagvs_2dcommunication_2eproto, 9, file_level_enum_descriptors_camel_2dagvs_2dcommunication_2eproto, file_level_service_descriptors_camel_2dagvs_2dcommunication_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_camel_2dagvs_2dcommunication_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_camel_2dagvs_2dcommunication_2eproto), true);
namespace Communication {

// ===================================================================

void CamelMessage_AllowFromAgvs::InitAsDefaultInstance() {
  ::Communication::_CamelMessage_AllowFromAgvs_default_instance_._instance.get_mutable()->agv_ = const_cast< ::Communication::AgvInAgvs*>(
      ::Communication::AgvInAgvs::internal_default_instance());
}
class CamelMessage_AllowFromAgvs::_Internal {
 public:
  static const ::Communication::AgvInAgvs& agv(const CamelMessage_AllowFromAgvs* msg);
};

const ::Communication::AgvInAgvs&
CamelMessage_AllowFromAgvs::_Internal::agv(const CamelMessage_AllowFromAgvs* msg) {
  return *msg->agv_;
}
CamelMessage_AllowFromAgvs::CamelMessage_AllowFromAgvs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Communication.CamelMessage.AllowFromAgvs)
}
CamelMessage_AllowFromAgvs::CamelMessage_AllowFromAgvs(const CamelMessage_AllowFromAgvs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      otheragv_(from.otheragv_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errormessage().empty()) {
    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from._internal_has_agv()) {
    agv_ = new ::Communication::AgvInAgvs(*from.agv_);
  } else {
    agv_ = nullptr;
  }
  allowcharging_ = from.allowcharging_;
  // @@protoc_insertion_point(copy_constructor:Communication.CamelMessage.AllowFromAgvs)
}

void CamelMessage_AllowFromAgvs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CamelMessage_AllowFromAgvs_camel_2dagvs_2dcommunication_2eproto.base);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&agv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allowcharging_) -
      reinterpret_cast<char*>(&agv_)) + sizeof(allowcharging_));
}

CamelMessage_AllowFromAgvs::~CamelMessage_AllowFromAgvs() {
  // @@protoc_insertion_point(destructor:Communication.CamelMessage.AllowFromAgvs)
  SharedDtor();
}

void CamelMessage_AllowFromAgvs::SharedDtor() {
  errormessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete agv_;
}

void CamelMessage_AllowFromAgvs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CamelMessage_AllowFromAgvs& CamelMessage_AllowFromAgvs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CamelMessage_AllowFromAgvs_camel_2dagvs_2dcommunication_2eproto.base);
  return *internal_default_instance();
}


void CamelMessage_AllowFromAgvs::Clear() {
// @@protoc_insertion_point(message_clear_start:Communication.CamelMessage.AllowFromAgvs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  otheragv_.Clear();
  errormessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && agv_ != nullptr) {
    delete agv_;
  }
  agv_ = nullptr;
  allowcharging_ = false;
  _internal_metadata_.Clear();
}

const char* CamelMessage_AllowFromAgvs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Communication.AgvInAgvs agv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errorMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Communication.CamelMessage.AllowFromAgvs.errorMessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allowCharging = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          allowcharging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Communication.AgvInAgvs otherAgv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_otheragv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CamelMessage_AllowFromAgvs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Communication.CamelMessage.AllowFromAgvs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Communication.AgvInAgvs agv = 1;
  if (this->has_agv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agv(this), target, stream);
  }

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormessage().data(), static_cast<int>(this->_internal_errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Communication.CamelMessage.AllowFromAgvs.errorMessage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errormessage(), target);
  }

  // bool allowCharging = 3;
  if (this->allowcharging() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allowcharging(), target);
  }

  // repeated .Communication.AgvInAgvs otherAgv = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_otheragv_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_otheragv(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Communication.CamelMessage.AllowFromAgvs)
  return target;
}

size_t CamelMessage_AllowFromAgvs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Communication.CamelMessage.AllowFromAgvs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Communication.AgvInAgvs otherAgv = 4;
  total_size += 1UL * this->_internal_otheragv_size();
  for (const auto& msg : this->otheragv_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormessage());
  }

  // .Communication.AgvInAgvs agv = 1;
  if (this->has_agv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agv_);
  }

  // bool allowCharging = 3;
  if (this->allowcharging() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CamelMessage_AllowFromAgvs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Communication.CamelMessage.AllowFromAgvs)
  GOOGLE_DCHECK_NE(&from, this);
  const CamelMessage_AllowFromAgvs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CamelMessage_AllowFromAgvs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Communication.CamelMessage.AllowFromAgvs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Communication.CamelMessage.AllowFromAgvs)
    MergeFrom(*source);
  }
}

void CamelMessage_AllowFromAgvs::MergeFrom(const CamelMessage_AllowFromAgvs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Communication.CamelMessage.AllowFromAgvs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  otheragv_.MergeFrom(from.otheragv_);
  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.has_agv()) {
    _internal_mutable_agv()->::Communication::AgvInAgvs::MergeFrom(from._internal_agv());
  }
  if (from.allowcharging() != 0) {
    _internal_set_allowcharging(from._internal_allowcharging());
  }
}

void CamelMessage_AllowFromAgvs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Communication.CamelMessage.AllowFromAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CamelMessage_AllowFromAgvs::CopyFrom(const CamelMessage_AllowFromAgvs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Communication.CamelMessage.AllowFromAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage_AllowFromAgvs::IsInitialized() const {
  return true;
}

void CamelMessage_AllowFromAgvs::InternalSwap(CamelMessage_AllowFromAgvs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  otheragv_.InternalSwap(&other->otheragv_);
  errormessage_.Swap(&other->errormessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(agv_, other->agv_);
  swap(allowcharging_, other->allowcharging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage_AllowFromAgvs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CamelMessage_ReportToAgvs::InitAsDefaultInstance() {
  ::Communication::_CamelMessage_ReportToAgvs_default_instance_._instance.get_mutable()->posion_ = const_cast< ::Communication::Posion*>(
      ::Communication::Posion::internal_default_instance());
}
class CamelMessage_ReportToAgvs::_Internal {
 public:
  static const ::Communication::Posion& posion(const CamelMessage_ReportToAgvs* msg);
};

const ::Communication::Posion&
CamelMessage_ReportToAgvs::_Internal::posion(const CamelMessage_ReportToAgvs* msg) {
  return *msg->posion_;
}
CamelMessage_ReportToAgvs::CamelMessage_ReportToAgvs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Communication.CamelMessage.ReportToAgvs)
}
CamelMessage_ReportToAgvs::CamelMessage_ReportToAgvs(const CamelMessage_ReportToAgvs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currentstation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currentstation().empty()) {
    currentstation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currentstation_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from._internal_has_posion()) {
    posion_ = new ::Communication::Posion(*from.posion_);
  } else {
    posion_ = nullptr;
  }
  ::memcpy(&battery_, &from.battery_,
    static_cast<size_t>(reinterpret_cast<char*>(&ischarging_) -
    reinterpret_cast<char*>(&battery_)) + sizeof(ischarging_));
  // @@protoc_insertion_point(copy_constructor:Communication.CamelMessage.ReportToAgvs)
}

void CamelMessage_ReportToAgvs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CamelMessage_ReportToAgvs_camel_2dagvs_2dcommunication_2eproto.base);
  currentstation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&posion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ischarging_) -
      reinterpret_cast<char*>(&posion_)) + sizeof(ischarging_));
}

CamelMessage_ReportToAgvs::~CamelMessage_ReportToAgvs() {
  // @@protoc_insertion_point(destructor:Communication.CamelMessage.ReportToAgvs)
  SharedDtor();
}

void CamelMessage_ReportToAgvs::SharedDtor() {
  currentstation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete posion_;
}

void CamelMessage_ReportToAgvs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CamelMessage_ReportToAgvs& CamelMessage_ReportToAgvs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CamelMessage_ReportToAgvs_camel_2dagvs_2dcommunication_2eproto.base);
  return *internal_default_instance();
}


void CamelMessage_ReportToAgvs::Clear() {
// @@protoc_insertion_point(message_clear_start:Communication.CamelMessage.ReportToAgvs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  currentstation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && posion_ != nullptr) {
    delete posion_;
  }
  posion_ = nullptr;
  ::memset(&battery_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ischarging_) -
      reinterpret_cast<char*>(&battery_)) + sizeof(ischarging_));
  _internal_metadata_.Clear();
}

const char* CamelMessage_ReportToAgvs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currentStation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currentstation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Communication.CamelMessage.ReportToAgvs.currentStation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Communication.CamelMessage.ReportToAgvs.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float battery = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          battery_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool isCharging = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ischarging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Communication.Device devices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .Communication.Posion posion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_posion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CamelMessage_ReportToAgvs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Communication.CamelMessage.ReportToAgvs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currentStation = 1;
  if (this->currentstation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currentstation().data(), static_cast<int>(this->_internal_currentstation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Communication.CamelMessage.ReportToAgvs.currentStation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currentstation(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Communication.CamelMessage.ReportToAgvs.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // float battery = 3;
  if (!(this->battery() <= 0 && this->battery() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_battery(), target);
  }

  // bool isCharging = 4;
  if (this->ischarging() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ischarging(), target);
  }

  // repeated .Communication.Device devices = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_devices(i), target, stream);
  }

  // .Communication.Posion posion = 6;
  if (this->has_posion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::posion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Communication.CamelMessage.ReportToAgvs)
  return target;
}

size_t CamelMessage_ReportToAgvs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Communication.CamelMessage.ReportToAgvs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Communication.Device devices = 5;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string currentStation = 1;
  if (this->currentstation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currentstation());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .Communication.Posion posion = 6;
  if (this->has_posion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *posion_);
  }

  // float battery = 3;
  if (!(this->battery() <= 0 && this->battery() >= 0)) {
    total_size += 1 + 4;
  }

  // bool isCharging = 4;
  if (this->ischarging() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CamelMessage_ReportToAgvs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Communication.CamelMessage.ReportToAgvs)
  GOOGLE_DCHECK_NE(&from, this);
  const CamelMessage_ReportToAgvs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CamelMessage_ReportToAgvs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Communication.CamelMessage.ReportToAgvs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Communication.CamelMessage.ReportToAgvs)
    MergeFrom(*source);
  }
}

void CamelMessage_ReportToAgvs::MergeFrom(const CamelMessage_ReportToAgvs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Communication.CamelMessage.ReportToAgvs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  if (from.currentstation().size() > 0) {

    currentstation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currentstation_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_posion()) {
    _internal_mutable_posion()->::Communication::Posion::MergeFrom(from._internal_posion());
  }
  if (!(from.battery() <= 0 && from.battery() >= 0)) {
    _internal_set_battery(from._internal_battery());
  }
  if (from.ischarging() != 0) {
    _internal_set_ischarging(from._internal_ischarging());
  }
}

void CamelMessage_ReportToAgvs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Communication.CamelMessage.ReportToAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CamelMessage_ReportToAgvs::CopyFrom(const CamelMessage_ReportToAgvs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Communication.CamelMessage.ReportToAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage_ReportToAgvs::IsInitialized() const {
  return true;
}

void CamelMessage_ReportToAgvs::InternalSwap(CamelMessage_ReportToAgvs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
  currentstation_.Swap(&other->currentstation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(posion_, other->posion_);
  swap(battery_, other->battery_);
  swap(ischarging_, other->ischarging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage_ReportToAgvs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CamelMessage_MissonFromAgvs::InitAsDefaultInstance() {
  ::Communication::_CamelMessage_MissonFromAgvs_default_instance_._instance.get_mutable()->task_ = const_cast< ::Communication::Task*>(
      ::Communication::Task::internal_default_instance());
}
class CamelMessage_MissonFromAgvs::_Internal {
 public:
  static const ::Communication::Task& task(const CamelMessage_MissonFromAgvs* msg);
};

const ::Communication::Task&
CamelMessage_MissonFromAgvs::_Internal::task(const CamelMessage_MissonFromAgvs* msg) {
  return *msg->task_;
}
CamelMessage_MissonFromAgvs::CamelMessage_MissonFromAgvs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Communication.CamelMessage.MissonFromAgvs)
}
CamelMessage_MissonFromAgvs::CamelMessage_MissonFromAgvs(const CamelMessage_MissonFromAgvs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  route_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_route().empty()) {
    route_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.route_);
  }
  actiontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actiontype().empty()) {
    actiontype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actiontype_);
  }
  if (from._internal_has_task()) {
    task_ = new ::Communication::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Communication.CamelMessage.MissonFromAgvs)
}

void CamelMessage_MissonFromAgvs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CamelMessage_MissonFromAgvs_camel_2dagvs_2dcommunication_2eproto.base);
  route_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actiontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_ = nullptr;
}

CamelMessage_MissonFromAgvs::~CamelMessage_MissonFromAgvs() {
  // @@protoc_insertion_point(destructor:Communication.CamelMessage.MissonFromAgvs)
  SharedDtor();
}

void CamelMessage_MissonFromAgvs::SharedDtor() {
  route_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actiontype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete task_;
}

void CamelMessage_MissonFromAgvs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CamelMessage_MissonFromAgvs& CamelMessage_MissonFromAgvs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CamelMessage_MissonFromAgvs_camel_2dagvs_2dcommunication_2eproto.base);
  return *internal_default_instance();
}


void CamelMessage_MissonFromAgvs::Clear() {
// @@protoc_insertion_point(message_clear_start:Communication.CamelMessage.MissonFromAgvs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actiontype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CamelMessage_MissonFromAgvs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string route = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_route();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Communication.CamelMessage.MissonFromAgvs.route"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string actionType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_actiontype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Communication.CamelMessage.MissonFromAgvs.actionType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Communication.Task task = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CamelMessage_MissonFromAgvs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Communication.CamelMessage.MissonFromAgvs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string route = 1;
  if (this->route().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route().data(), static_cast<int>(this->_internal_route().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Communication.CamelMessage.MissonFromAgvs.route");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_route(), target);
  }

  // string actionType = 2;
  if (this->actiontype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actiontype().data(), static_cast<int>(this->_internal_actiontype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Communication.CamelMessage.MissonFromAgvs.actionType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_actiontype(), target);
  }

  // .Communication.Task task = 3;
  if (this->has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::task(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Communication.CamelMessage.MissonFromAgvs)
  return target;
}

size_t CamelMessage_MissonFromAgvs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Communication.CamelMessage.MissonFromAgvs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route = 1;
  if (this->route().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route());
  }

  // string actionType = 2;
  if (this->actiontype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actiontype());
  }

  // .Communication.Task task = 3;
  if (this->has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CamelMessage_MissonFromAgvs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Communication.CamelMessage.MissonFromAgvs)
  GOOGLE_DCHECK_NE(&from, this);
  const CamelMessage_MissonFromAgvs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CamelMessage_MissonFromAgvs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Communication.CamelMessage.MissonFromAgvs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Communication.CamelMessage.MissonFromAgvs)
    MergeFrom(*source);
  }
}

void CamelMessage_MissonFromAgvs::MergeFrom(const CamelMessage_MissonFromAgvs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Communication.CamelMessage.MissonFromAgvs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.route().size() > 0) {

    route_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.route_);
  }
  if (from.actiontype().size() > 0) {

    actiontype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actiontype_);
  }
  if (from.has_task()) {
    _internal_mutable_task()->::Communication::Task::MergeFrom(from._internal_task());
  }
}

void CamelMessage_MissonFromAgvs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Communication.CamelMessage.MissonFromAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CamelMessage_MissonFromAgvs::CopyFrom(const CamelMessage_MissonFromAgvs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Communication.CamelMessage.MissonFromAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage_MissonFromAgvs::IsInitialized() const {
  return true;
}

void CamelMessage_MissonFromAgvs::InternalSwap(CamelMessage_MissonFromAgvs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  route_.Swap(&other->route_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  actiontype_.Swap(&other->actiontype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(task_, other->task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage_MissonFromAgvs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CamelMessage_RequestToAgvs::InitAsDefaultInstance() {
}
class CamelMessage_RequestToAgvs::_Internal {
 public:
};

CamelMessage_RequestToAgvs::CamelMessage_RequestToAgvs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Communication.CamelMessage.RequestToAgvs)
}
CamelMessage_RequestToAgvs::CamelMessage_RequestToAgvs(const CamelMessage_RequestToAgvs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&getmissoninfo_, &from.getmissoninfo_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestcharging_) -
    reinterpret_cast<char*>(&getmissoninfo_)) + sizeof(requestcharging_));
  // @@protoc_insertion_point(copy_constructor:Communication.CamelMessage.RequestToAgvs)
}

void CamelMessage_RequestToAgvs::SharedCtor() {
  ::memset(&getmissoninfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestcharging_) -
      reinterpret_cast<char*>(&getmissoninfo_)) + sizeof(requestcharging_));
}

CamelMessage_RequestToAgvs::~CamelMessage_RequestToAgvs() {
  // @@protoc_insertion_point(destructor:Communication.CamelMessage.RequestToAgvs)
  SharedDtor();
}

void CamelMessage_RequestToAgvs::SharedDtor() {
}

void CamelMessage_RequestToAgvs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CamelMessage_RequestToAgvs& CamelMessage_RequestToAgvs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CamelMessage_RequestToAgvs_camel_2dagvs_2dcommunication_2eproto.base);
  return *internal_default_instance();
}


void CamelMessage_RequestToAgvs::Clear() {
// @@protoc_insertion_point(message_clear_start:Communication.CamelMessage.RequestToAgvs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&getmissoninfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestcharging_) -
      reinterpret_cast<char*>(&getmissoninfo_)) + sizeof(requestcharging_));
  _internal_metadata_.Clear();
}

const char* CamelMessage_RequestToAgvs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool getMissonInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          getmissoninfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool setUseable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          setuseable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cancelTask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          canceltask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool requestCharging = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          requestcharging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CamelMessage_RequestToAgvs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Communication.CamelMessage.RequestToAgvs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool getMissonInfo = 1;
  if (this->getmissoninfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_getmissoninfo(), target);
  }

  // bool setUseable = 2;
  if (this->setuseable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_setuseable(), target);
  }

  // bool cancelTask = 3;
  if (this->canceltask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_canceltask(), target);
  }

  // bool requestCharging = 4;
  if (this->requestcharging() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_requestcharging(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Communication.CamelMessage.RequestToAgvs)
  return target;
}

size_t CamelMessage_RequestToAgvs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Communication.CamelMessage.RequestToAgvs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool getMissonInfo = 1;
  if (this->getmissoninfo() != 0) {
    total_size += 1 + 1;
  }

  // bool setUseable = 2;
  if (this->setuseable() != 0) {
    total_size += 1 + 1;
  }

  // bool cancelTask = 3;
  if (this->canceltask() != 0) {
    total_size += 1 + 1;
  }

  // bool requestCharging = 4;
  if (this->requestcharging() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CamelMessage_RequestToAgvs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Communication.CamelMessage.RequestToAgvs)
  GOOGLE_DCHECK_NE(&from, this);
  const CamelMessage_RequestToAgvs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CamelMessage_RequestToAgvs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Communication.CamelMessage.RequestToAgvs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Communication.CamelMessage.RequestToAgvs)
    MergeFrom(*source);
  }
}

void CamelMessage_RequestToAgvs::MergeFrom(const CamelMessage_RequestToAgvs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Communication.CamelMessage.RequestToAgvs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.getmissoninfo() != 0) {
    _internal_set_getmissoninfo(from._internal_getmissoninfo());
  }
  if (from.setuseable() != 0) {
    _internal_set_setuseable(from._internal_setuseable());
  }
  if (from.canceltask() != 0) {
    _internal_set_canceltask(from._internal_canceltask());
  }
  if (from.requestcharging() != 0) {
    _internal_set_requestcharging(from._internal_requestcharging());
  }
}

void CamelMessage_RequestToAgvs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Communication.CamelMessage.RequestToAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CamelMessage_RequestToAgvs::CopyFrom(const CamelMessage_RequestToAgvs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Communication.CamelMessage.RequestToAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage_RequestToAgvs::IsInitialized() const {
  return true;
}

void CamelMessage_RequestToAgvs::InternalSwap(CamelMessage_RequestToAgvs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(getmissoninfo_, other->getmissoninfo_);
  swap(setuseable_, other->setuseable_);
  swap(canceltask_, other->canceltask_);
  swap(requestcharging_, other->requestcharging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage_RequestToAgvs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CamelMessage::InitAsDefaultInstance() {
  ::Communication::_CamelMessage_default_instance_.allowfromagvs_ = const_cast< ::Communication::CamelMessage_AllowFromAgvs*>(
      ::Communication::CamelMessage_AllowFromAgvs::internal_default_instance());
  ::Communication::_CamelMessage_default_instance_.reporttoagvs_ = const_cast< ::Communication::CamelMessage_ReportToAgvs*>(
      ::Communication::CamelMessage_ReportToAgvs::internal_default_instance());
  ::Communication::_CamelMessage_default_instance_.missonfromagvs_ = const_cast< ::Communication::CamelMessage_MissonFromAgvs*>(
      ::Communication::CamelMessage_MissonFromAgvs::internal_default_instance());
  ::Communication::_CamelMessage_default_instance_.requesttoagvs_ = const_cast< ::Communication::CamelMessage_RequestToAgvs*>(
      ::Communication::CamelMessage_RequestToAgvs::internal_default_instance());
}
class CamelMessage::_Internal {
 public:
  static const ::Communication::CamelMessage_AllowFromAgvs& allowfromagvs(const CamelMessage* msg);
  static const ::Communication::CamelMessage_ReportToAgvs& reporttoagvs(const CamelMessage* msg);
  static const ::Communication::CamelMessage_MissonFromAgvs& missonfromagvs(const CamelMessage* msg);
  static const ::Communication::CamelMessage_RequestToAgvs& requesttoagvs(const CamelMessage* msg);
};

const ::Communication::CamelMessage_AllowFromAgvs&
CamelMessage::_Internal::allowfromagvs(const CamelMessage* msg) {
  return *msg->onlyone_.allowfromagvs_;
}
const ::Communication::CamelMessage_ReportToAgvs&
CamelMessage::_Internal::reporttoagvs(const CamelMessage* msg) {
  return *msg->onlyone_.reporttoagvs_;
}
const ::Communication::CamelMessage_MissonFromAgvs&
CamelMessage::_Internal::missonfromagvs(const CamelMessage* msg) {
  return *msg->onlyone_.missonfromagvs_;
}
const ::Communication::CamelMessage_RequestToAgvs&
CamelMessage::_Internal::requesttoagvs(const CamelMessage* msg) {
  return *msg->onlyone_.requesttoagvs_;
}
void CamelMessage::set_allocated_allowfromagvs(::Communication::CamelMessage_AllowFromAgvs* allowfromagvs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_onlyone();
  if (allowfromagvs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      allowfromagvs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allowfromagvs, submessage_arena);
    }
    set_has_allowfromagvs();
    onlyone_.allowfromagvs_ = allowfromagvs;
  }
  // @@protoc_insertion_point(field_set_allocated:Communication.CamelMessage.allowFromAgvs)
}
void CamelMessage::set_allocated_reporttoagvs(::Communication::CamelMessage_ReportToAgvs* reporttoagvs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_onlyone();
  if (reporttoagvs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reporttoagvs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reporttoagvs, submessage_arena);
    }
    set_has_reporttoagvs();
    onlyone_.reporttoagvs_ = reporttoagvs;
  }
  // @@protoc_insertion_point(field_set_allocated:Communication.CamelMessage.reportToAgvs)
}
void CamelMessage::set_allocated_missonfromagvs(::Communication::CamelMessage_MissonFromAgvs* missonfromagvs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_onlyone();
  if (missonfromagvs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      missonfromagvs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, missonfromagvs, submessage_arena);
    }
    set_has_missonfromagvs();
    onlyone_.missonfromagvs_ = missonfromagvs;
  }
  // @@protoc_insertion_point(field_set_allocated:Communication.CamelMessage.missonFromAgvs)
}
void CamelMessage::set_allocated_requesttoagvs(::Communication::CamelMessage_RequestToAgvs* requesttoagvs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_onlyone();
  if (requesttoagvs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      requesttoagvs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requesttoagvs, submessage_arena);
    }
    set_has_requesttoagvs();
    onlyone_.requesttoagvs_ = requesttoagvs;
  }
  // @@protoc_insertion_point(field_set_allocated:Communication.CamelMessage.requestToAgvs)
}
CamelMessage::CamelMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Communication.CamelMessage)
}
CamelMessage::CamelMessage(const CamelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_onlyone();
  switch (from.onlyone_case()) {
    case kAllowFromAgvs: {
      _internal_mutable_allowfromagvs()->::Communication::CamelMessage_AllowFromAgvs::MergeFrom(from._internal_allowfromagvs());
      break;
    }
    case kReportToAgvs: {
      _internal_mutable_reporttoagvs()->::Communication::CamelMessage_ReportToAgvs::MergeFrom(from._internal_reporttoagvs());
      break;
    }
    case kMissonFromAgvs: {
      _internal_mutable_missonfromagvs()->::Communication::CamelMessage_MissonFromAgvs::MergeFrom(from._internal_missonfromagvs());
      break;
    }
    case kRequestToAgvs: {
      _internal_mutable_requesttoagvs()->::Communication::CamelMessage_RequestToAgvs::MergeFrom(from._internal_requesttoagvs());
      break;
    }
    case ONLYONE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Communication.CamelMessage)
}

void CamelMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CamelMessage_camel_2dagvs_2dcommunication_2eproto.base);
  clear_has_onlyone();
}

CamelMessage::~CamelMessage() {
  // @@protoc_insertion_point(destructor:Communication.CamelMessage)
  SharedDtor();
}

void CamelMessage::SharedDtor() {
  if (has_onlyone()) {
    clear_onlyone();
  }
}

void CamelMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CamelMessage& CamelMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CamelMessage_camel_2dagvs_2dcommunication_2eproto.base);
  return *internal_default_instance();
}


void CamelMessage::clear_onlyone() {
// @@protoc_insertion_point(one_of_clear_start:Communication.CamelMessage)
  switch (onlyone_case()) {
    case kAllowFromAgvs: {
      delete onlyone_.allowfromagvs_;
      break;
    }
    case kReportToAgvs: {
      delete onlyone_.reporttoagvs_;
      break;
    }
    case kMissonFromAgvs: {
      delete onlyone_.missonfromagvs_;
      break;
    }
    case kRequestToAgvs: {
      delete onlyone_.requesttoagvs_;
      break;
    }
    case ONLYONE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONLYONE_NOT_SET;
}


void CamelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Communication.CamelMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_onlyone();
  _internal_metadata_.Clear();
}

const char* CamelMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Communication.CamelMessage.AllowFromAgvs allowFromAgvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_allowfromagvs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Communication.CamelMessage.ReportToAgvs reportToAgvs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reporttoagvs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Communication.CamelMessage.MissonFromAgvs missonFromAgvs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_missonfromagvs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Communication.CamelMessage.RequestToAgvs requestToAgvs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_requesttoagvs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CamelMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Communication.CamelMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Communication.CamelMessage.AllowFromAgvs allowFromAgvs = 1;
  if (_internal_has_allowfromagvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::allowfromagvs(this), target, stream);
  }

  // .Communication.CamelMessage.ReportToAgvs reportToAgvs = 2;
  if (_internal_has_reporttoagvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reporttoagvs(this), target, stream);
  }

  // .Communication.CamelMessage.MissonFromAgvs missonFromAgvs = 3;
  if (_internal_has_missonfromagvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::missonfromagvs(this), target, stream);
  }

  // .Communication.CamelMessage.RequestToAgvs requestToAgvs = 4;
  if (_internal_has_requesttoagvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::requesttoagvs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Communication.CamelMessage)
  return target;
}

size_t CamelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Communication.CamelMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (onlyone_case()) {
    // .Communication.CamelMessage.AllowFromAgvs allowFromAgvs = 1;
    case kAllowFromAgvs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *onlyone_.allowfromagvs_);
      break;
    }
    // .Communication.CamelMessage.ReportToAgvs reportToAgvs = 2;
    case kReportToAgvs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *onlyone_.reporttoagvs_);
      break;
    }
    // .Communication.CamelMessage.MissonFromAgvs missonFromAgvs = 3;
    case kMissonFromAgvs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *onlyone_.missonfromagvs_);
      break;
    }
    // .Communication.CamelMessage.RequestToAgvs requestToAgvs = 4;
    case kRequestToAgvs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *onlyone_.requesttoagvs_);
      break;
    }
    case ONLYONE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CamelMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Communication.CamelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CamelMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CamelMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Communication.CamelMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Communication.CamelMessage)
    MergeFrom(*source);
  }
}

void CamelMessage::MergeFrom(const CamelMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Communication.CamelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.onlyone_case()) {
    case kAllowFromAgvs: {
      _internal_mutable_allowfromagvs()->::Communication::CamelMessage_AllowFromAgvs::MergeFrom(from._internal_allowfromagvs());
      break;
    }
    case kReportToAgvs: {
      _internal_mutable_reporttoagvs()->::Communication::CamelMessage_ReportToAgvs::MergeFrom(from._internal_reporttoagvs());
      break;
    }
    case kMissonFromAgvs: {
      _internal_mutable_missonfromagvs()->::Communication::CamelMessage_MissonFromAgvs::MergeFrom(from._internal_missonfromagvs());
      break;
    }
    case kRequestToAgvs: {
      _internal_mutable_requesttoagvs()->::Communication::CamelMessage_RequestToAgvs::MergeFrom(from._internal_requesttoagvs());
      break;
    }
    case ONLYONE_NOT_SET: {
      break;
    }
  }
}

void CamelMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Communication.CamelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CamelMessage::CopyFrom(const CamelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Communication.CamelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage::IsInitialized() const {
  return true;
}

void CamelMessage::InternalSwap(CamelMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(onlyone_, other->onlyone_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Posion::InitAsDefaultInstance() {
}
class Posion::_Internal {
 public:
};

Posion::Posion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Communication.Posion)
}
Posion::Posion(const Posion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&x_)) + sizeof(theta_));
  // @@protoc_insertion_point(copy_constructor:Communication.Posion)
}

void Posion::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&x_)) + sizeof(theta_));
}

Posion::~Posion() {
  // @@protoc_insertion_point(destructor:Communication.Posion)
  SharedDtor();
}

void Posion::SharedDtor() {
}

void Posion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Posion& Posion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Posion_camel_2dagvs_2dcommunication_2eproto.base);
  return *internal_default_instance();
}


void Posion::Clear() {
// @@protoc_insertion_point(message_clear_start:Communication.Posion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&x_)) + sizeof(theta_));
  _internal_metadata_.Clear();
}

const char* Posion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Theta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Posion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Communication.Posion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float X = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float Y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float Theta = 3;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_theta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Communication.Posion)
  return target;
}

size_t Posion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Communication.Posion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float X = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float Y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float Theta = 3;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Posion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Communication.Posion)
  GOOGLE_DCHECK_NE(&from, this);
  const Posion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Posion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Communication.Posion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Communication.Posion)
    MergeFrom(*source);
  }
}

void Posion::MergeFrom(const Posion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Communication.Posion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
}

void Posion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Communication.Posion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Posion::CopyFrom(const Posion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Communication.Posion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Posion::IsInitialized() const {
  return true;
}

void Posion::InternalSwap(Posion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(theta_, other->theta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Posion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Device::InitAsDefaultInstance() {
}
class Device::_Internal {
 public:
};

Device::Device()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Communication.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Communication.Device)
}

void Device::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Device_camel_2dagvs_2dcommunication_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:Communication.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Device& Device::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Device_camel_2dagvs_2dcommunication_2eproto.base);
  return *internal_default_instance();
}


void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:Communication.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Communication.Device.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isActivate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isactivate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Device::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Communication.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Communication.Device.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool isActivate = 3;
  if (this->isactivate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isactivate(), target);
  }

  // float value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Communication.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Communication.Device)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // bool isActivate = 3;
  if (this->isactivate() != 0) {
    total_size += 1 + 1;
  }

  // float value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Device::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Communication.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const Device* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Communication.Device)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Communication.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Communication.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.isactivate() != 0) {
    _internal_set_isactivate(from._internal_isactivate());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void Device::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Communication.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Communication.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(isactivate_, other->isactivate_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AgvInAgvs::InitAsDefaultInstance() {
}
class AgvInAgvs::_Internal {
 public:
};

AgvInAgvs::AgvInAgvs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Communication.AgvInAgvs)
}
AgvInAgvs::AgvInAgvs(const AgvInAgvs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  currentstation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currentstation().empty()) {
    currentstation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currentstation_);
  }
  targetstation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetstation().empty()) {
    targetstation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.targetstation_);
  }
  ::memcpy(&isuseable_, &from.isuseable_,
    static_cast<size_t>(reinterpret_cast<char*>(&hastask_) -
    reinterpret_cast<char*>(&isuseable_)) + sizeof(hastask_));
  // @@protoc_insertion_point(copy_constructor:Communication.AgvInAgvs)
}

void AgvInAgvs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgvInAgvs_camel_2dagvs_2dcommunication_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currentstation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetstation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&isuseable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hastask_) -
      reinterpret_cast<char*>(&isuseable_)) + sizeof(hastask_));
}

AgvInAgvs::~AgvInAgvs() {
  // @@protoc_insertion_point(destructor:Communication.AgvInAgvs)
  SharedDtor();
}

void AgvInAgvs::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currentstation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetstation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AgvInAgvs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgvInAgvs& AgvInAgvs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgvInAgvs_camel_2dagvs_2dcommunication_2eproto.base);
  return *internal_default_instance();
}


void AgvInAgvs::Clear() {
// @@protoc_insertion_point(message_clear_start:Communication.AgvInAgvs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currentstation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetstation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&isuseable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hastask_) -
      reinterpret_cast<char*>(&isuseable_)) + sizeof(hastask_));
  _internal_metadata_.Clear();
}

const char* AgvInAgvs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Communication.AgvInAgvs.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string currentStation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_currentstation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Communication.AgvInAgvs.currentStation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string targetStation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_targetstation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Communication.AgvInAgvs.targetStation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isUseable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          isuseable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasTask = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hastask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgvInAgvs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Communication.AgvInAgvs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Communication.AgvInAgvs.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string currentStation = 2;
  if (this->currentstation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currentstation().data(), static_cast<int>(this->_internal_currentstation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Communication.AgvInAgvs.currentStation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_currentstation(), target);
  }

  // string targetStation = 3;
  if (this->targetstation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetstation().data(), static_cast<int>(this->_internal_targetstation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Communication.AgvInAgvs.targetStation");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_targetstation(), target);
  }

  // bool isUseable = 4;
  if (this->isuseable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isuseable(), target);
  }

  // bool hasTask = 5;
  if (this->hastask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_hastask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Communication.AgvInAgvs)
  return target;
}

size_t AgvInAgvs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Communication.AgvInAgvs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string currentStation = 2;
  if (this->currentstation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currentstation());
  }

  // string targetStation = 3;
  if (this->targetstation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetstation());
  }

  // bool isUseable = 4;
  if (this->isuseable() != 0) {
    total_size += 1 + 1;
  }

  // bool hasTask = 5;
  if (this->hastask() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgvInAgvs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Communication.AgvInAgvs)
  GOOGLE_DCHECK_NE(&from, this);
  const AgvInAgvs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgvInAgvs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Communication.AgvInAgvs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Communication.AgvInAgvs)
    MergeFrom(*source);
  }
}

void AgvInAgvs::MergeFrom(const AgvInAgvs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Communication.AgvInAgvs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.currentstation().size() > 0) {

    currentstation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currentstation_);
  }
  if (from.targetstation().size() > 0) {

    targetstation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.targetstation_);
  }
  if (from.isuseable() != 0) {
    _internal_set_isuseable(from._internal_isuseable());
  }
  if (from.hastask() != 0) {
    _internal_set_hastask(from._internal_hastask());
  }
}

void AgvInAgvs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Communication.AgvInAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgvInAgvs::CopyFrom(const AgvInAgvs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Communication.AgvInAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvInAgvs::IsInitialized() const {
  return true;
}

void AgvInAgvs::InternalSwap(AgvInAgvs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currentstation_.Swap(&other->currentstation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  targetstation_.Swap(&other->targetstation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(isuseable_, other->isuseable_);
  swap(hastask_, other->hastask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvInAgvs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Task::InitAsDefaultInstance() {
}
class Task::_Internal {
 public:
};

Task::Task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Communication.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  // @@protoc_insertion_point(copy_constructor:Communication.Task)
}

void Task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Task_camel_2dagvs_2dcommunication_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:Communication.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Task& Task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Task_camel_2dagvs_2dcommunication_2eproto.base);
  return *internal_default_instance();
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:Communication.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Communication.Task.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Communication.Task.to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Communication.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Communication.Task.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string to = 2;
  if (this->to().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Communication.Task.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Communication.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Communication.Task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Communication.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Communication.Task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Communication.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Communication.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
}

void Task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Communication.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Communication.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Communication
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Communication::CamelMessage_AllowFromAgvs* Arena::CreateMaybeMessage< ::Communication::CamelMessage_AllowFromAgvs >(Arena* arena) {
  return Arena::CreateInternal< ::Communication::CamelMessage_AllowFromAgvs >(arena);
}
template<> PROTOBUF_NOINLINE ::Communication::CamelMessage_ReportToAgvs* Arena::CreateMaybeMessage< ::Communication::CamelMessage_ReportToAgvs >(Arena* arena) {
  return Arena::CreateInternal< ::Communication::CamelMessage_ReportToAgvs >(arena);
}
template<> PROTOBUF_NOINLINE ::Communication::CamelMessage_MissonFromAgvs* Arena::CreateMaybeMessage< ::Communication::CamelMessage_MissonFromAgvs >(Arena* arena) {
  return Arena::CreateInternal< ::Communication::CamelMessage_MissonFromAgvs >(arena);
}
template<> PROTOBUF_NOINLINE ::Communication::CamelMessage_RequestToAgvs* Arena::CreateMaybeMessage< ::Communication::CamelMessage_RequestToAgvs >(Arena* arena) {
  return Arena::CreateInternal< ::Communication::CamelMessage_RequestToAgvs >(arena);
}
template<> PROTOBUF_NOINLINE ::Communication::CamelMessage* Arena::CreateMaybeMessage< ::Communication::CamelMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Communication::CamelMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Communication::Posion* Arena::CreateMaybeMessage< ::Communication::Posion >(Arena* arena) {
  return Arena::CreateInternal< ::Communication::Posion >(arena);
}
template<> PROTOBUF_NOINLINE ::Communication::Device* Arena::CreateMaybeMessage< ::Communication::Device >(Arena* arena) {
  return Arena::CreateInternal< ::Communication::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::Communication::AgvInAgvs* Arena::CreateMaybeMessage< ::Communication::AgvInAgvs >(Arena* arena) {
  return Arena::CreateInternal< ::Communication::AgvInAgvs >(arena);
}
template<> PROTOBUF_NOINLINE ::Communication::Task* Arena::CreateMaybeMessage< ::Communication::Task >(Arena* arena) {
  return Arena::CreateInternal< ::Communication::Task >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
